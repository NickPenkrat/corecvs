/**
 * \file photostationPlacerParamsBase.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "photostationPlacerParamsBase.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<PhotostationPlacerParamsBase>::reflection = Reflection();
template<>
int BaseReflection<PhotostationPlacerParamsBase>::dummy = PhotostationPlacerParamsBase::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN

int PhotostationPlacerParamsBase::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Photostation Placer Params Base",
        "Photostation Placer Params Base",
        ""
    );
     

    fields().push_back(
        new BoolField
        (
          PhotostationPlacerParamsBase::FORCEGPS_ID,
          offsetof(PhotostationPlacerParamsBase, mForceGps),
          true,
          "forceGps",
          "forceGps",
          "forceGps"
        )
    );
    fields().push_back(
        new IntField
        (
          PhotostationPlacerParamsBase::SPECULATIVITY_ID,
          offsetof(PhotostationPlacerParamsBase, mSpeculativity),
          1000,
          "speculativity",
          "speculativity",
          "Enforce gps locations",
          true,
         -50000,
         50000
        )
    );
    fields().push_back(
        new IntField
        (
          PhotostationPlacerParamsBase::MINIMALINLIERCOUNT_ID,
          offsetof(PhotostationPlacerParamsBase, mMinimalInlierCount),
          32,
          "minimalInlierCount",
          "minimalInlierCount",
          "minimalInlierCount",
          true,
         -50000,
         50000
        )
    );
    fields().push_back(
        new DoubleField
        (
          PhotostationPlacerParamsBase::MAXIMALFAILUREPROBABILITY_ID,
          offsetof(PhotostationPlacerParamsBase, mMaximalFailureProbability),
          0.15,
          "maximalFailureProbability",
          "maximalFailureProbability",
          "maximalFailureProbability",
          true,
         -50000,
         50000
        )
    );
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


