#ifndef PHOTOSTATION_PLACER_FEATURE_SELECTION_PARAMETERS_H_
#define PHOTOSTATION_PLACER_FEATURE_SELECTION_PARAMETERS_H_
/**
 * \file photostationPlacerFeatureSelectionParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Photostation Placer Feature Selection Parameters 
 * Photostation Placer Feature Selection Parameters 
 **/
class PhotostationPlacerFeatureSelectionParameters : public BaseReflection<PhotostationPlacerFeatureSelectionParameters>
{
public:
    enum FieldId {
        INLIERTHRESHOLD_ID,
        TRACKINLIERTHRESHOLD_ID,
        PAIRCORRESPONDENCETHRESHOLD_ID,
        DISTANCELIMIT_ID,
        PHOTOSTATION_PLACER_FEATURE_SELECTION_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief inlierThreshold 
     * Inlier threshold 
     */
    double mInlierThreshold;

    /** 
     * \brief trackInlierThreshold 
     * Track append threshold 
     */
    double mTrackInlierThreshold;

    /** 
     * \brief pairCorrespondenceThreshold 
     * Correspondence threshold 
     */
    double mPairCorrespondenceThreshold;

    /** 
     * \brief distanceLimit 
     * Track distance limit 
     */
    double mDistanceLimit;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    double inlierThreshold() const
    {
        return mInlierThreshold;
    }

    double trackInlierThreshold() const
    {
        return mTrackInlierThreshold;
    }

    double pairCorrespondenceThreshold() const
    {
        return mPairCorrespondenceThreshold;
    }

    double distanceLimit() const
    {
        return mDistanceLimit;
    }

    /* Section with setters */
    void setInlierThreshold(double inlierThreshold)
    {
        mInlierThreshold = inlierThreshold;
    }

    void setTrackInlierThreshold(double trackInlierThreshold)
    {
        mTrackInlierThreshold = trackInlierThreshold;
    }

    void setPairCorrespondenceThreshold(double pairCorrespondenceThreshold)
    {
        mPairCorrespondenceThreshold = pairCorrespondenceThreshold;
    }

    void setDistanceLimit(double distanceLimit)
    {
        mDistanceLimit = distanceLimit;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mInlierThreshold,           static_cast<const DoubleField *>  (fields()[INLIERTHRESHOLD_ID]));
        visitor.visit(mTrackInlierThreshold,      static_cast<const DoubleField *>  (fields()[TRACKINLIERTHRESHOLD_ID]));
        visitor.visit(mPairCorrespondenceThreshold, static_cast<const DoubleField *>  (fields()[PAIRCORRESPONDENCETHRESHOLD_ID]));
        visitor.visit(mDistanceLimit,             static_cast<const DoubleField *>  (fields()[DISTANCELIMIT_ID]));
    }

    PhotostationPlacerFeatureSelectionParameters()
    {
        DefaultSetter setter;
        accept(setter);
    }

    PhotostationPlacerFeatureSelectionParameters(
          double inlierThreshold
        , double trackInlierThreshold
        , double pairCorrespondenceThreshold
        , double distanceLimit
    )
    {
        mInlierThreshold = inlierThreshold;
        mTrackInlierThreshold = trackInlierThreshold;
        mPairCorrespondenceThreshold = pairCorrespondenceThreshold;
        mDistanceLimit = distanceLimit;
    }

    friend ostream& operator << (ostream &out, PhotostationPlacerFeatureSelectionParameters &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //PHOTOSTATION_PLACER_FEATURE_SELECTION_PARAMETERS_H_
