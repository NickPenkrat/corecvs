/**
 * \file extrinsicsPlacerParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "extrinsicsPlacerParametersControlWidget.h"
#include "ui_extrinsicsPlacerParametersControlWidget.h"
#include <memory>
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


ExtrinsicsPlacerParametersControlWidget::ExtrinsicsPlacerParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::ExtrinsicsPlacerParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->triangulateOnSphereCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->skydomeSizeSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->iterationsSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->useSimpleCostCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->lock1CamCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->lockOrientationsCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->lockPositionsCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
}

ExtrinsicsPlacerParametersControlWidget::~ExtrinsicsPlacerParametersControlWidget()
{

    delete mUi;
}

void ExtrinsicsPlacerParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<ExtrinsicsPlacerParameters> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void ExtrinsicsPlacerParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<ExtrinsicsPlacerParameters>(createParameters()), rootPath);
}

void ExtrinsicsPlacerParametersControlWidget::getParameters(ExtrinsicsPlacerParameters& params) const
{
    params = *std::unique_ptr<ExtrinsicsPlacerParameters>(createParameters());
}


ExtrinsicsPlacerParameters *ExtrinsicsPlacerParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new ExtrinsicsPlacerParameters(
          mUi->triangulateOnSphereCheckBox->isChecked()
        , mUi->skydomeSizeSpinBox->value()
        , mUi->iterationsSpinBox->value()
        , mUi->useSimpleCostCheckBox->isChecked()
        , mUi->lock1CamCheckBox->isChecked()
        , mUi->lockOrientationsCheckBox->isChecked()
        , mUi->lockPositionsCheckBox->isChecked()
    );
}

void ExtrinsicsPlacerParametersControlWidget::setParameters(const ExtrinsicsPlacerParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->triangulateOnSphereCheckBox->setChecked(input.triangulateOnSphere());
    mUi->skydomeSizeSpinBox->setValue(input.skydomeSize());
    mUi->iterationsSpinBox->setValue(input.iterations());
    mUi->useSimpleCostCheckBox->setChecked(input.useSimpleCost());
    mUi->lock1CamCheckBox->setChecked(input.lock1Cam());
    mUi->lockOrientationsCheckBox->setChecked(input.lockOrientations());
    mUi->lockPositionsCheckBox->setChecked(input.lockPositions());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void ExtrinsicsPlacerParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    ExtrinsicsPlacerParameters *inputCasted = static_cast<ExtrinsicsPlacerParameters *>(input);
    setParameters(*inputCasted);
}
