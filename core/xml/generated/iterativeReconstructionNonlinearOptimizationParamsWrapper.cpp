/**
 * \file iterativeReconstructionNonlinearOptimizationParamsWrapper.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "iterativeReconstructionNonlinearOptimizationParamsWrapper.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<IterativeReconstructionNonlinearOptimizationParamsWrapper>::reflection = Reflection();
template<>
int BaseReflection<IterativeReconstructionNonlinearOptimizationParamsWrapper>::dummy = IterativeReconstructionNonlinearOptimizationParamsWrapper::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN

int IterativeReconstructionNonlinearOptimizationParamsWrapper::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Iterative Reconstruction Nonlinear Optimization Params Wrapper",
        "Iterative Reconstruction Nonlinear Optimization Params Wrapper",
        ""
    );

     getReflection()->objectSize = sizeof(IterativeReconstructionNonlinearOptimizationParamsWrapper);
     

    CompositeField* field0 = new CompositeField
        (
          IterativeReconstructionNonlinearOptimizationParamsWrapper::OPTIMIZATIONPARAMS_ID,
          offsetof(IterativeReconstructionNonlinearOptimizationParamsWrapper, mOptimizationParams),
          "optimizationParams",
          "ReconstructionFunctorOptimizationParams",
          "optimizationParams",
          "optimizationParams",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Reconstruction Functor Optimization Params");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field0->reflection = it->second;
        } else {
             printf("Reflection IterativeReconstructionNonlinearOptimizationParamsWrapper to the subclass Reconstruction Functor Optimization Params can't be linked\n");
        }
    }
    fields().push_back(field0);
    /*  */ 
    EnumField* field1 = new EnumField
        (
          IterativeReconstructionNonlinearOptimizationParamsWrapper::ERRORTYPE_ID,
          offsetof(IterativeReconstructionNonlinearOptimizationParamsWrapper, mErrorType),
          3,
          "errorType",
          "errorType",
          "Functor optimizattion error type",
          new EnumReflection(4
          , new EnumOption(0,"REPROJECTION")
          , new EnumOption(1,"ANGULAR")
          , new EnumOption(2,"CROSS_PRODUCT")
          , new EnumOption(3,"RAY_DIFF")
          )
        );
    field1->widgetHint=BaseField::COMBO_BOX;
    fields().push_back(field1);
    /*  */ 
    IntField* field2 = new IntField
        (
          IterativeReconstructionNonlinearOptimizationParamsWrapper::POSTAPPENDNONLINEARITERATIONS_ID,
          offsetof(IterativeReconstructionNonlinearOptimizationParamsWrapper, mPostAppendNonlinearIterations),
          80,
          "postAppendNonlinearIterations",
          "postAppendNonlinearIterations",
          "Post-append non-linear optimization iterations",
          true,
         1,
         100000
        );
    fields().push_back(field2);
    /*  */ 
    IntField* field3 = new IntField
        (
          IterativeReconstructionNonlinearOptimizationParamsWrapper::FINALNONLINEARITERATIONS_ID,
          offsetof(IterativeReconstructionNonlinearOptimizationParamsWrapper, mFinalNonLinearIterations),
          400,
          "finalNonLinearIterations",
          "finalNonLinearIterations",
          "Final non-linear iterations",
          true,
         1,
         100000
        );
    fields().push_back(field3);
    /*  */ 
    IntField* field4 = new IntField
        (
          IterativeReconstructionNonlinearOptimizationParamsWrapper::ALTERNATINGITERATIONS_ID,
          offsetof(IterativeReconstructionNonlinearOptimizationParamsWrapper, mAlternatingIterations),
          0,
          "alternatingIterations",
          "alternatingIterations",
          "Alternating optimization on success steps",
          true,
         0,
         1000
        );
    fields().push_back(field4);
    /*  */ 
    IntField* field5 = new IntField
        (
          IterativeReconstructionNonlinearOptimizationParamsWrapper::PARTIALBA_ID,
          offsetof(IterativeReconstructionNonlinearOptimizationParamsWrapper, mPartialBA),
          8,
          "partialBA",
          "partialBA",
          "Partial BA size",
          true,
         1,
         9999999
        );
    fields().push_back(field5);
    /*  */ 
    DoubleField* field6 = new DoubleField
        (
          IterativeReconstructionNonlinearOptimizationParamsWrapper::FULLBALIMIT_ID,
          offsetof(IterativeReconstructionNonlinearOptimizationParamsWrapper, mFullBALimit),
          0.1,
          "fullBALimit",
          "fullBALimit",
          "Full BA increase",
          true,
         0,
         1e+08
        );
    field6->widgetHint=BaseField::SPIN_BOX;
    field6->precision=6;
    fields().push_back(field6);
    /*  */ 
    BoolField* field7 = new BoolField
        (
          IterativeReconstructionNonlinearOptimizationParamsWrapper::EXCESSIVEQUATERNIONPARAMETRIZATION_ID,
          offsetof(IterativeReconstructionNonlinearOptimizationParamsWrapper, mExcessiveQuaternionParametrization),
          false,
          "excessiveQuaternionParametrization",
          "excessiveQuaternionParametrization",
          "Excessive/non-excessive quaternion parametrization"
        );
    field7->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field7);
    /*  */ 
    BoolField* field8 = new BoolField
        (
          IterativeReconstructionNonlinearOptimizationParamsWrapper::SCALELOCK_ID,
          offsetof(IterativeReconstructionNonlinearOptimizationParamsWrapper, mScaleLock),
          false,
          "scaleLock",
          "scaleLock",
          "Lock scale"
        );
    field8->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field8);
    /*  */ 
    BoolField* field9 = new BoolField
        (
          IterativeReconstructionNonlinearOptimizationParamsWrapper::EXPLICITINVERSE_ID,
          offsetof(IterativeReconstructionNonlinearOptimizationParamsWrapper, mExplicitInverse),
          false,
          "explicitInverse",
          "explicitInverse",
          "Explisit inverse in Schur complement solving"
        );
    field9->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field9);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Iterative Reconstruction Nonlinear Optimization Params Wrapper")]= &reflection;
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


