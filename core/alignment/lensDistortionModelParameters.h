#ifndef LENS_DISTORTION_MODEL_PARAMETERS_H_
#define LENS_DISTORTION_MODEL_PARAMETERS_H_
/**
 * \file lensDistortionModelParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"
#include "levenmarq.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Lens Distortion Model Parameters 
 * 
 * \ingroup distcorrect
 * \brief This structure holds the parameters to correct the image.
 *
 * The intrinsic correction parameters form
 * http://www.vision.caltech.edu/bouguetj/calib_doc/papers/heikkila97.pdf
 *
 * Here are the correction formulas
 *  \f{eqnarray*}
 *  \pmatrix{dx \cr dy} &=& \pmatrix{x \cr y} - \pmatrix{x_c \cr y_c} \\
 *                    r &=& \sqrt{dx^2 + dy^2} \\
 *                 r_{corr} &=& k_1 r^2 + k_2 r^4 \\
 *           \hat{r}_{corr} &=& \sum_{i=1}^{n} k_i r^i \\
 *
 *   \pmatrix{x_{coor}^t \cr y_{coor}^t} &=&
 *   \pmatrix{p_1 dx dy + p_2 (r^2 + 2 dx^2)\cr p_1 (r^2 + 2 dy^2) + p_2 dx dy} \\
 *
 *
 *   \pmatrix{x \cr y} &=&
 *   \pmatrix{x_0 \cr y_0} +
 *   \pmatrix{dx \cr dy} * r_{corr} +
 *   \pmatrix{x_{coor}^t \cr y_{coor}^t}
 *
 *   \f}
 *
 *   For Marquardt-Levenberg algorithm we will need derivatives of the function
 *
 *   for more details please read the code of getCorrectionForPoint() or read the Heikkila paper
     
 **/
class LensDistortionModelParameters : public BaseReflection<LensDistortionModelParameters>
{
public:
    enum FieldId {
        PRINCIPALX_ID,
        PRINCIPALY_ID,
        TANGENTIALX_ID,
        TANGENTIALY_ID,
        KOEFF_ID,
        ASPECT_ID,
        SCALE_ID,
        NORMALIZING_FOCAL_ID,
        SHIFTX_ID,
        SHIFTY_ID,
        MAP_FORWARD_ID, // Forward = from undistorted to distorted, so for compatibility reasons defaults is false
        LENS_DISTORTION_MODEL_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief principalX 
     * The center of the distortion \f$x_c\f$ 
     */
    double mPrincipalX;

    /** 
     * \brief principalY 
     * The center of the distortion \f$y_c\f$ 
     */
    double mPrincipalY;

    /** 
     * \brief tangentialX 
     * First tangent correction coefficient - \f$p_1\f$ 
     */
    double mTangentialX;

    /** 
     * \brief tangentialY 
     * Second tangent correction coefficient - \f$p_2\f$ 
     */
    double mTangentialY;

    /** 
     * \brief koeff 
     * Polynom to describe radial correction 
     */
    vector<double> mKoeff;

    /** 
     * \brief aspect 
     * aspect 
     */
    double mAspect;

    /** 
     * \brief scale 
     * scale 
     */
    double mScale;

    /** 
     * \brief Normalizing Focal 
     * Normalizing Focal 
     */
    double mNormalizingFocal;

    /** 
     * \brief shiftX 
     * Additional shift \f$x_s\f$ 
     */
    double mShiftX;

    /** 
     * \brief shiftY 
     * Additional shift \f$y_s\f$ 
     */
    double mShiftY;

    /** 
     * \brief True if maps from undistorted to distorted 
     * This one is used to identify direction of map
     */
    bool mMapForward;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    double principalX() const
    {
        return mPrincipalX;
    }

    double principalY() const
    {
        return mPrincipalY;
    }

    double tangentialX() const
    {
        return mTangentialX;
    }

    double tangentialY() const
    {
        return mTangentialY;
    }

    vector<double> koeff() const
    {
        return mKoeff;
    }

    double aspect() const
    {
        return mAspect;
    }

    double scale() const
    {
        return mScale;
    }

    double normalizingFocal() const
    {
        return mNormalizingFocal;
    }

    double shiftX() const
    {
        return mShiftX;
    }

    double shiftY() const
    {
        return mShiftY;
    }

    bool mapForward() const
    {
        return mMapForward;
    }

    /* Section with setters */
    void setPrincipalX(double principalX)
    {
        mPrincipalX = principalX;
    }

    void setPrincipalY(double principalY)
    {
        mPrincipalY = principalY;
    }

    void setTangentialX(double tangentialX)
    {
        mTangentialX = tangentialX;
    }

    void setTangentialY(double tangentialY)
    {
        mTangentialY = tangentialY;
    }

    void setKoeff(vector<double> koeff)
    {
        mKoeff = koeff;
    }

    void setAspect(double aspect)
    {
        mAspect = aspect;
    }

    void setScale(double scale)
    {
        mScale = scale;
    }

    void setNormalizingFocal(double normalizingFocal)
    {
        mNormalizingFocal = normalizingFocal;
    }

    void setShiftX(double shiftX)
    {
        mShiftX = shiftX;
    }

    void setShiftY(double shiftY)
    {
        mShiftY = shiftY;
    }

    void setMapForward(bool mapForward)
    {
        mMapForward = mapForward;
    }

    corecvs::Vector2dd mapForward(const corecvs::Vector2dd &v) const
    {
        return mMapForward ? map(v) : invMap(v);
    }

    corecvs::Vector2dd mapBackward(const corecvs::Vector2dd &v) const
    {
        return mMapForward ? invMap(v) : map(v);
    }

    corecvs::Vector2dd map(const corecvs::Vector2dd &v) const
    {
        double x = v[0];
        double y = v[1];
        if (mMapForward)
        {
            x -= mShiftX;
            y -= mShiftY;
            x /= mScale;
            y /= mScale;
        }
        double cx = mPrincipalX;
        double cy = mPrincipalY;
        double p1 = mTangentialX;
        double p2 = mTangentialY;

        double dx = (x - cx) / mNormalizingFocal * mAspect;
        double dy = (y - cy) / mNormalizingFocal;

        /*double dx = dpx / mParams.focal;
        double dy = dpy / mParams.focal;*/

        double dxsq = dx * dx;
        double dysq = dy * dy;
        double dxdy = dx * dy;

        double rsq = dxsq + dysq;
        double r = sqrt(rsq);

        double radialCorrection = radialScaleNormalized(r);
//        SYNC_PRINT(("RadialCorrection::map (): [%lf %lf ] %lf %lf\n", x, y, rsq, radialCorrection));


        double radialX = (double)dx * radialCorrection;
        double radialY = (double)dy * radialCorrection;

        double tangentX =    2 * p1 * dxdy      + p2 * ( rsq + 2 * dxsq );
        double tangentY = p1 * (rsq + 2 * dysq) +     2 * p2 * dxdy      ;

        auto res = Vector2dd(
               ((dx + radialX + tangentX) / mAspect),
                ((dy + radialY + tangentY))
               ) * mNormalizingFocal;
        if (!mMapForward)
        {
            res *= mScale;
            res += Vector2dd(mShiftX, mShiftY);
        }
        return res + Vector2dd(cx, cy);
    }
    struct InverseFunctor : FunctionArgs
    {
        void operator() (const double* in, double *out)
        {
            Vector2dd x(in[0], in[1]);
            auto err = params->map(x) - target;
            out[0] = err[0];
            out[1] = err[1];
        }
        InverseFunctor(Vector2dd target, const LensDistortionModelParameters* params) : FunctionArgs(2, 2), target(target), params(params)
        {
        }
        Vector2dd target;
        const LensDistortionModelParameters* params;
    };
    corecvs::Vector2dd invMap(const corecvs::Vector2dd &v, const corecvs::Vector2dd &guess) const
    {
        InverseFunctor functor(v, this);
        LevenbergMarquardt lm(1000);
        lm.f = &functor;
        lm.traceProgress = false;
        std::vector<double> in = {guess[0], guess[1]}, out(2);
        auto res = lm.fit(in, out);
        Vector2dd resV(res[0], res[1]);
        return resV;
    }
    corecvs::Vector2dd invMap(const corecvs::Vector2dd &v) const
    {
        return invMap(v, v);
    }
    inline double radialScaleNormalized(double r) const
    {
        double rpow = r;
        double radialCorrection = 0;

        for (unsigned i = 0; i < mKoeff.size(); i++)
        {
            radialCorrection += mKoeff[i] * rpow;
            rpow *= r;
        }
        return radialCorrection;
    }
    inline double radialScale(double r) const
    {
        double normalizedR = r / mNormalizingFocal;
        return radialScaleNormalized(normalizedR);
    }

    void getInscribedImageRect(const Vector2dd &tlDistorted, const Vector2dd &drDistorted, Vector2dd &tlUndistorted, Vector2dd &drUndistorted) const;
    void getCircumscribedImageRect(const Vector2dd &tlDistorted, const Vector2dd &drDistorted, Vector2dd &tlUndistorted, Vector2dd &drUndistorted) const;



    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mPrincipalX,                static_cast<const DoubleField *>  (fields()[PRINCIPALX_ID]));
        visitor.visit(mPrincipalY,                static_cast<const DoubleField *>  (fields()[PRINCIPALY_ID]));
        visitor.visit(mTangentialX,               static_cast<const DoubleField *>  (fields()[TANGENTIALX_ID]));
        visitor.visit(mTangentialY,               static_cast<const DoubleField *>  (fields()[TANGENTIALY_ID]));
        visitor.visit(mKoeff,                     static_cast<const DoubleVectorField *>(fields()[KOEFF_ID]));
        visitor.visit(mAspect,                    static_cast<const DoubleField *>  (fields()[ASPECT_ID]));
        visitor.visit(mScale,                     static_cast<const DoubleField *>  (fields()[SCALE_ID]));
        visitor.visit(mNormalizingFocal,          static_cast<const DoubleField *>  (fields()[NORMALIZING_FOCAL_ID]));
        visitor.visit(mShiftX,                    static_cast<const DoubleField *>  (fields()[SHIFTX_ID]));
        visitor.visit(mShiftY,                    static_cast<const DoubleField *>  (fields()[SHIFTY_ID]));
        visitor.visit(mMapForward,                static_cast<const BoolField   *>  (fields()[MAP_FORWARD_ID]));
    }

    LensDistortionModelParameters()
    {
        DefaultSetter setter;
        accept(setter);
    }

    LensDistortionModelParameters(
          double principalX
        , double principalY
        , double tangentialX
        , double tangentialY
        , vector<double> koeff
        , double aspect
        , double scale
        , double normalizingFocal
        , double shiftX
        , double shiftY
        , bool   mapForward = false
    )
    {
        mPrincipalX = principalX;
        mPrincipalY = principalY;
        mTangentialX = tangentialX;
        mTangentialY = tangentialY;
        mKoeff = koeff;
        mAspect = aspect;
        mScale = scale;
        mNormalizingFocal = normalizingFocal;
        mShiftX = shiftX;
        mShiftY = shiftY;
        mMapForward = mapForward;
    }

    friend ostream& operator << (ostream &out, LensDistortionModelParameters &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }

private:
    void getRectMap(const Vector2dd &tl, const Vector2dd &dr, std::vector<Vector2dd> boundaries[4]) const;
};
#endif  //LENS_DISTORTION_MODEL_PARAMETERS_H_
