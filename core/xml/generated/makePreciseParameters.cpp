/**
 * \file makePreciseParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "makePreciseParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<MakePreciseParameters>::reflection = Reflection();
template<>
int BaseReflection<MakePreciseParameters>::dummy = MakePreciseParameters::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN

int MakePreciseParameters::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Make Precise Parameters",
        "Make Precise Parameters",
        ""
    );
     

    fields().push_back(
        new BoolField
        (
          MakePreciseParameters::SHOULD_MAKE_PRECISE_ID,
          offsetof(MakePreciseParameters, mShouldMakePrecise),
          false,
          "Should Make Precise",
          "Should Make Precise",
          "Should Make Precise"
        )
    );
    fields().push_back(
        new EnumField
        (
          MakePreciseParameters::ALGORITHM_ID,
          offsetof(MakePreciseParameters, mAlgorithm),
          0,
          "Algorithm",
          "Algorithm",
          "Algorithm",
           NULL
        )
    );
    fields().push_back(
        new EnumField
        (
          MakePreciseParameters::INTERPOLATION_ID,
          offsetof(MakePreciseParameters, mInterpolation),
          0,
          "Interpolation",
          "Interpolation",
          "Interpolation",
           NULL
        )
    );
    fields().push_back(
        new IntField
        (
          MakePreciseParameters::KLT_ITERATIONS_ID,
          offsetof(MakePreciseParameters, mKLTIterations),
          0,
          "KLT iterations",
          "KLT iterations",
          "KLT iterations"
        )
    );
    fields().push_back(
        new IntField
        (
          MakePreciseParameters::KLT_RADIUS_H_ID,
          offsetof(MakePreciseParameters, mKLTRadiusH),
          0,
          "KLT Radius H",
          "KLT Radius H",
          "KLT Radius H"
        )
    );
    fields().push_back(
        new IntField
        (
          MakePreciseParameters::KLT_RADIUS_W_ID,
          offsetof(MakePreciseParameters, mKLTRadiusW),
          0,
          "KLT Radius W",
          "KLT Radius W",
          "KLT Radius W"
        )
    );
    fields().push_back(
        new DoubleField
        (
          MakePreciseParameters::KLT_THRESHOLD_ID,
          offsetof(MakePreciseParameters, mKLTThreshold),
          0,
          "KLT Threshold",
          "KLT Threshold",
          "KLT Threshold"
        )
    );
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


