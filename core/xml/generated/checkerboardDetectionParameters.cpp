/**
 * \file checkerboardDetectionParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "checkerboardDetectionParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<CheckerboardDetectionParameters>::reflection = Reflection();
template<>
int BaseReflection<CheckerboardDetectionParameters>::dummy = CheckerboardDetectionParameters::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN

int CheckerboardDetectionParameters::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Checkerboard Detection Parameters",
        "Checkerboard Detection Parameters",
        ""
    );
     

    fields().push_back(
        new BoolField
        (
          CheckerboardDetectionParameters::ESTIMATE_UNDISTORTED_FROM_DISTORTED_ID,
          offsetof(CheckerboardDetectionParameters, mEstimateUndistortedFromDistorted),
          true,
          "Estimate undistorted from distorted",
          "Estimate undistorted from distorted",
          "Estimate undistorted from distorted"
        )
    );
    fields().push_back(
        new BoolField
        (
          CheckerboardDetectionParameters::USE_UNDISTORTION_ID,
          offsetof(CheckerboardDetectionParameters, mUseUndistortion),
          false,
          "Use Undistortion",
          "Use Undistortion",
          "Use Undistortion"
        )
    );
    fields().push_back(
        new EnumField
        (
          CheckerboardDetectionParameters::ALGORITHM_ID,
          offsetof(CheckerboardDetectionParameters, mAlgorithm),
          0,
          "Algorithm",
          "Algorithm",
          "Algorithm",
          new EnumReflection(2
          , new EnumOption(0,"Homebrew Detector")
          , new EnumOption(1,"OpenCV Detector")
          )
        )
    );
    fields().push_back(
        new EnumField
        (
          CheckerboardDetectionParameters::CHANNEL_ID,
          offsetof(CheckerboardDetectionParameters, mChannel),
          3,
          "Channel",
          "Channel",
          "Channel",
          new EnumReflection(8
          , new EnumOption(0,"R")
          , new EnumOption(1,"G")
          , new EnumOption(2,"B")
          , new EnumOption(3,"Gray")
          , new EnumOption(4,"Luma")
          , new EnumOption(5,"Hue")
          , new EnumOption(6,"Saturation")
          , new EnumOption(7,"Value")
          )
        )
    );
    fields().push_back(
        new DoubleField
        (
          CheckerboardDetectionParameters::CELLSIZEHOR_ID,
          offsetof(CheckerboardDetectionParameters, mCellSizeHor),
          0.05,
          "cellSizeHor",
          "cellSizeHor",
          "cellSizeHor",
          true,
         0,
         1
        )
    );
    fields().push_back(
        new DoubleField
        (
          CheckerboardDetectionParameters::CELLSIZEVERT_ID,
          offsetof(CheckerboardDetectionParameters, mCellSizeVert),
          0.05,
          "cellSizeVert",
          "cellSizeVert",
          "cellSizeVert",
          true,
         0,
         1
        )
    );
    fields().push_back(
        new BoolField
        (
          CheckerboardDetectionParameters::CLEANEXISTING_ID,
          offsetof(CheckerboardDetectionParameters, mCleanExisting),
          true,
          "cleanExisting",
          "cleanExisting",
          "cleanExisting"
        )
    );
    fields().push_back(
        new IntField
        (
          CheckerboardDetectionParameters::PRECISEDIAMETER_ID,
          offsetof(CheckerboardDetectionParameters, mPreciseDiameter),
          50,
          "preciseDiameter",
          "preciseDiameter",
          "preciseDiameter",
          true,
         0,
         999999
        )
    );
    fields().push_back(
        new IntField
        (
          CheckerboardDetectionParameters::ITERATIONCOUNT_ID,
          offsetof(CheckerboardDetectionParameters, mIterationCount),
          50,
          "iterationCount",
          "iterationCount",
          "iterationCount",
          true,
         1,
         999999
        )
    );
    fields().push_back(
        new DoubleField
        (
          CheckerboardDetectionParameters::MINACCURACY_ID,
          offsetof(CheckerboardDetectionParameters, mMinAccuracy),
          0.01,
          "minAccuracy",
          "minAccuracy",
          "minAccuracy",
          true,
         0,
         999999
        )
    );
    fields().push_back(
        new BoolField
        (
          CheckerboardDetectionParameters::PARTIALBOARD_ID,
          offsetof(CheckerboardDetectionParameters, mPartialBoard),
          true,
          "partialBoard",
          "partialBoard",
          "partialBoard"
        )
    );
    fields().push_back(
        new BoolField
        (
          CheckerboardDetectionParameters::FASTBOARDSPEEDUP_ID,
          offsetof(CheckerboardDetectionParameters, mFastBoardSpeedup),
          true,
          "fastBoardSpeedup",
          "fastBoardSpeedup",
          "fastBoardSpeedup"
        )
    );
    fields().push_back(
        new BoolField
        (
          CheckerboardDetectionParameters::DRAW_SGFS_ON_BOARDS_ID,
          offsetof(CheckerboardDetectionParameters, mDrawSGFsOnBoards),
          true,
          "Draw SGFs on boards",
          "Draw SGFs on boards",
          "Draw SGFs on boards"
        )
    );
    fields().push_back(
        new BoolField
        (
          CheckerboardDetectionParameters::SKIP_UNDISTORTED_WITH_NO_DISTORTED_BOARD_ID,
          offsetof(CheckerboardDetectionParameters, mSkipUndistortedWithNoDistortedBoard),
          false,
          "Skip undistorted with no distorted board",
          "Skip undistorted with no distorted board",
          "Skip undistorted with no distorted board"
        )
    );
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


