#ifndef RECONSTRUCTION_FUNCTOR_OPTIMIZATION_PARAMS_H_
#define RECONSTRUCTION_FUNCTOR_OPTIMIZATION_PARAMS_H_
/**
 * \file reconstructionFunctorOptimizationParams.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Reconstruction Functor Optimization Params 
 * Reconstruction Functor Optimization Params 
 **/
class ReconstructionFunctorOptimizationParams : public BaseReflection<ReconstructionFunctorOptimizationParams>
{
public:
    enum FieldId {
        NONDEGENERATEORIENTATIONS_ID,
        DEGENERATEORIENTATIONS_ID,
        NONDEGENERATETRANSLATIONS_ID,
        DEGENERATETRANSLATIONS_ID,
        FOCALS_ID,
        PRINCIPALS_ID,
        POINTS_ID,
        TUNEGPS_ID,
        RECONSTRUCTION_FUNCTOR_OPTIMIZATION_PARAMS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief nonDegenerateOrientations 
     * Orientations of all cameras except first 
     */
    bool mNonDegenerateOrientations;

    /** 
     * \brief degenerateOrientations 
     * Orientation of first camera 
     */
    bool mDegenerateOrientations;

    /** 
     * \brief nonDegenerateTranslations 
     * Translations of all cameras except first 
     */
    bool mNonDegenerateTranslations;

    /** 
     * \brief degenerateTranslations 
     * Translation of first camera 
     */
    bool mDegenerateTranslations;

    /** 
     * \brief focals 
     * Camera focals in multicamera 
     */
    bool mFocals;

    /** 
     * \brief principals 
     * Camera principals in multicamera 
     */
    bool mPrincipals;

    /** 
     * \brief points 
     * 3D points 
     */
    bool mPoints;

    /** 
     * \brief tuneGps 
     * Allow shifting of GPS-initialized cameras 
     */
    bool mTuneGps;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    bool nonDegenerateOrientations() const
    {
        return mNonDegenerateOrientations;
    }

    bool degenerateOrientations() const
    {
        return mDegenerateOrientations;
    }

    bool nonDegenerateTranslations() const
    {
        return mNonDegenerateTranslations;
    }

    bool degenerateTranslations() const
    {
        return mDegenerateTranslations;
    }

    bool focals() const
    {
        return mFocals;
    }

    bool principals() const
    {
        return mPrincipals;
    }

    bool points() const
    {
        return mPoints;
    }

    bool tuneGps() const
    {
        return mTuneGps;
    }

    /* Section with setters */
    void setNonDegenerateOrientations(bool nonDegenerateOrientations)
    {
        mNonDegenerateOrientations = nonDegenerateOrientations;
    }

    void setDegenerateOrientations(bool degenerateOrientations)
    {
        mDegenerateOrientations = degenerateOrientations;
    }

    void setNonDegenerateTranslations(bool nonDegenerateTranslations)
    {
        mNonDegenerateTranslations = nonDegenerateTranslations;
    }

    void setDegenerateTranslations(bool degenerateTranslations)
    {
        mDegenerateTranslations = degenerateTranslations;
    }

    void setFocals(bool focals)
    {
        mFocals = focals;
    }

    void setPrincipals(bool principals)
    {
        mPrincipals = principals;
    }

    void setPoints(bool points)
    {
        mPoints = points;
    }

    void setTuneGps(bool tuneGps)
    {
        mTuneGps = tuneGps;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mNonDegenerateOrientations, static_cast<const BoolField *>    (fields()[NONDEGENERATEORIENTATIONS_ID]));
        visitor.visit(mDegenerateOrientations,    static_cast<const BoolField *>    (fields()[DEGENERATEORIENTATIONS_ID]));
        visitor.visit(mNonDegenerateTranslations, static_cast<const BoolField *>    (fields()[NONDEGENERATETRANSLATIONS_ID]));
        visitor.visit(mDegenerateTranslations,    static_cast<const BoolField *>    (fields()[DEGENERATETRANSLATIONS_ID]));
        visitor.visit(mFocals,                    static_cast<const BoolField *>    (fields()[FOCALS_ID]));
        visitor.visit(mPrincipals,                static_cast<const BoolField *>    (fields()[PRINCIPALS_ID]));
        visitor.visit(mPoints,                    static_cast<const BoolField *>    (fields()[POINTS_ID]));
        visitor.visit(mTuneGps,                   static_cast<const BoolField *>    (fields()[TUNEGPS_ID]));
    }

    ReconstructionFunctorOptimizationParams()
    {
        DefaultSetter setter;
        accept(setter);
    }

    ReconstructionFunctorOptimizationParams(
          bool nonDegenerateOrientations
        , bool degenerateOrientations
        , bool nonDegenerateTranslations
        , bool degenerateTranslations
        , bool focals
        , bool principals
        , bool points
        , bool tuneGps
    )
    {
        mNonDegenerateOrientations = nonDegenerateOrientations;
        mDegenerateOrientations = degenerateOrientations;
        mNonDegenerateTranslations = nonDegenerateTranslations;
        mDegenerateTranslations = degenerateTranslations;
        mFocals = focals;
        mPrincipals = principals;
        mPoints = points;
        mTuneGps = tuneGps;
    }

    friend ostream& operator << (ostream &out, ReconstructionFunctorOptimizationParams &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //RECONSTRUCTION_FUNCTOR_OPTIMIZATION_PARAMS_H_
