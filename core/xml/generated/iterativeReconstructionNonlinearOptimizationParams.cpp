/**
 * \file iterativeReconstructionNonlinearOptimizationParams.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "iterativeReconstructionNonlinearOptimizationParams.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<IterativeReconstructionNonlinearOptimizationParams>::reflection = Reflection();
template<>
int BaseReflection<IterativeReconstructionNonlinearOptimizationParams>::dummy = IterativeReconstructionNonlinearOptimizationParams::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN

int IterativeReconstructionNonlinearOptimizationParams::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Iterative Reconstruction Nonlinear Optimization Params",
        "Iterative Reconstruction Nonlinear Optimization Params",
        ""
    );
     

    fields().push_back(
        new EnumField
        (
          IterativeReconstructionNonlinearOptimizationParams::ERRORTYPE_ID,
          offsetof(IterativeReconstructionNonlinearOptimizationParams, mErrorType),
          3,
          "errorType",
          "errorType",
          "Functor optimizattion error type",
          new EnumReflection(4
          , new EnumOption(0,"REPROJECTION")
          , new EnumOption(1,"ANGULAR")
          , new EnumOption(2,"CROSS_PRODUCT")
          , new EnumOption(3,"RAY_DIFF")
          )
        )
    );
    fields().push_back(
        new IntField
        (
          IterativeReconstructionNonlinearOptimizationParams::POSTAPPENDNONLINEARITERATIONS_ID,
          offsetof(IterativeReconstructionNonlinearOptimizationParams, mPostAppendNonlinearIterations),
          200,
          "postAppendNonlinearIterations",
          "postAppendNonlinearIterations",
          "Post-append non-linear optimization iterations"
        )
    );
    fields().push_back(
        new IntField
        (
          IterativeReconstructionNonlinearOptimizationParams::FINALNONLINEARITERATIONS_ID,
          offsetof(IterativeReconstructionNonlinearOptimizationParams, mFinalNonLinearIterations),
          2000,
          "finalNonLinearIterations",
          "finalNonLinearIterations",
          "Final non-linear iterations"
        )
    );
    fields().push_back(
        new IntField
        (
          IterativeReconstructionNonlinearOptimizationParams::ALTERNATINGITERATIONS_ID,
          offsetof(IterativeReconstructionNonlinearOptimizationParams, mAlternatingIterations),
          20,
          "alternatingIterations",
          "alternatingIterations",
          "Alternating optimization on success steps"
        )
    );
    fields().push_back(
        new BoolField
        (
          IterativeReconstructionNonlinearOptimizationParams::EXCESSIVEQUATERNIONPARAMETRIZATION_ID,
          offsetof(IterativeReconstructionNonlinearOptimizationParams, mExcessiveQuaternionParametrization),
          true,
          "excessiveQuaternionParametrization",
          "excessiveQuaternionParametrization",
          "Excessive/non-excessive quaternion parametrization"
        )
    );
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


