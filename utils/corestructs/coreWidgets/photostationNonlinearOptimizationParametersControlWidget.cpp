/**
 * \file photostationNonlinearOptimizationParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "photostationNonlinearOptimizationParametersControlWidget.h"
#include "ui_photostationNonlinearOptimizationParametersControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


PhotostationNonlinearOptimizationParametersControlWidget::PhotostationNonlinearOptimizationParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::PhotostationNonlinearOptimizationParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->postAppendNonlinearIterationsSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->finalNonLinearIterationsSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->alternatingIterationsSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->excessiveQuaternionParametrizationCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
}

PhotostationNonlinearOptimizationParametersControlWidget::~PhotostationNonlinearOptimizationParametersControlWidget()
{

    delete mUi;
}

void PhotostationNonlinearOptimizationParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    PhotostationNonlinearOptimizationParameters *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void PhotostationNonlinearOptimizationParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    PhotostationNonlinearOptimizationParameters *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}

 /* Composite fields are NOT supported so far */
void PhotostationNonlinearOptimizationParametersControlWidget::getParameters(PhotostationNonlinearOptimizationParameters& params) const
{

    params.setPostAppendNonlinearIterations(mUi->postAppendNonlinearIterationsSpinBox->value());
    params.setFinalNonLinearIterations(mUi->finalNonLinearIterationsSpinBox->value());
    params.setAlternatingIterations(mUi->alternatingIterationsSpinBox->value());
    params.setExcessiveQuaternionParametrization(mUi->excessiveQuaternionParametrizationCheckBox->isChecked());

}

PhotostationNonlinearOptimizationParameters *PhotostationNonlinearOptimizationParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    PhotostationNonlinearOptimizationParameters *result = new PhotostationNonlinearOptimizationParameters(
          mUi->postAppendNonlinearIterationsSpinBox->value()
        , mUi->finalNonLinearIterationsSpinBox->value()
        , mUi->alternatingIterationsSpinBox->value()
        , mUi->excessiveQuaternionParametrizationCheckBox->isChecked()
    );
    return result;
}

void PhotostationNonlinearOptimizationParametersControlWidget::setParameters(const PhotostationNonlinearOptimizationParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->postAppendNonlinearIterationsSpinBox->setValue(input.postAppendNonlinearIterations());
    mUi->finalNonLinearIterationsSpinBox->setValue(input.finalNonLinearIterations());
    mUi->alternatingIterationsSpinBox->setValue(input.alternatingIterations());
    mUi->excessiveQuaternionParametrizationCheckBox->setChecked(input.excessiveQuaternionParametrization());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void PhotostationNonlinearOptimizationParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    PhotostationNonlinearOptimizationParameters *inputCasted = static_cast<PhotostationNonlinearOptimizationParameters *>(input);
    setParameters(*inputCasted);
}
