/**
 * \file merger.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "merger.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<Merger>::reflection = Reflection();
template<>
int BaseReflection<Merger>::dummy = Merger::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int Merger::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Merger",
        "Merger parameters",
        ""
    );

     getReflection()->objectSize = sizeof(Merger);
     

    IntField* field0 = new IntField
        (
          Merger::UNDISTMETHOD_ID,
          offsetof(Merger, mUndistMethod),
          0,
          "undistMethod",
          "undistMethod",
          "undistMethod",
          true,
         0,
         2
        );
    fields().push_back(field0);
    /*  */ 
    IntField* field1 = new IntField
        (
          Merger::FRAMETOUNDIST_ID,
          offsetof(Merger, mFrameToUndist),
          0,
          "frameToUndist",
          "frameToUndist",
          "frameToUndist",
          true,
         0,
         3
        );
    fields().push_back(field1);
    /*  */ 
    DoubleField* field2 = new DoubleField
        (
          Merger::FOV_ID,
          offsetof(Merger, mFOV),
          120,
          "FOV",
          "FOV",
          "FOV",
          true,
         10,
         360
        );
    field2->widgetHint=BaseField::SPIN_BOX;
    field2->suffixHint="deg";
    field2->precision=2;
    fields().push_back(field2);
    /*  */ 
    DoubleField* field3 = new DoubleField
        (
          Merger::OUT_SIZE_H_ID,
          offsetof(Merger, mOutSizeH),
          1000,
          "Out Size H",
          "Out Size H",
          "Out Size H",
          true,
         100,
         9999
        );
    field3->widgetHint=BaseField::SPIN_BOX;
    field3->suffixHint="px";
    field3->precision=2;
    fields().push_back(field3);
    /*  */ 
    DoubleField* field4 = new DoubleField
        (
          Merger::OUT_PHY_SIZE_L_ID,
          offsetof(Merger, mOutPhySizeL),
          200,
          "Out Phy Size L",
          "Out Phy Size L",
          "Out Phy Size L",
          true,
         100,
         9999
        );
    field4->widgetHint=BaseField::SPIN_BOX;
    field4->suffixHint="dm";
    field4->precision=2;
    fields().push_back(field4);
    /*  */ 
    DoubleField* field5 = new DoubleField
        (
          Merger::OUT_PHY_SIZE_W_ID,
          offsetof(Merger, mOutPhySizeW),
          200,
          "Out Phy Size W",
          "Out Phy Size W",
          "Out Phy Size W",
          true,
         100,
         9999
        );
    field5->widgetHint=BaseField::SPIN_BOX;
    field5->suffixHint="dm";
    field5->precision=2;
    fields().push_back(field5);
    /*  */ 
    DoubleField* field6 = new DoubleField
        (
          Merger::GROUND_Z_ID,
          offsetof(Merger, mGroundZ),
          -20,
          "ground Z",
          "ground Z",
          "ground Z",
          true,
         -9999,
         9999
        );
    field6->widgetHint=BaseField::SPIN_BOX;
    field6->precision=2;
    fields().push_back(field6);
    /*  */ 
    BoolField* field7 = new BoolField
        (
          Merger::SWITCH1_ID,
          offsetof(Merger, mSwitch1),
          true,
          "switch1",
          "switch1",
          "switch1"
        );
    field7->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field7);
    /*  */ 
    CompositeField* field8 = new CompositeField
        (
          Merger::POS1_ID,
          offsetof(Merger, mPos1),
          "pos1",
          "EuclidianMoveParameters",
          "pos1",
          "pos1",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Euclidian Move Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field8->reflection = it->second;
        } else {
             printf("Reflection Merger to the subclass Euclidian Move Parameters can't be linked\n");
        }
    }
    fields().push_back(field8);
    /*  */ 
    BoolField* field9 = new BoolField
        (
          Merger::SWITCH2_ID,
          offsetof(Merger, mSwitch2),
          true,
          "switch2",
          "switch2",
          "switch2"
        );
    field9->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field9);
    /*  */ 
    CompositeField* field10 = new CompositeField
        (
          Merger::POS2_ID,
          offsetof(Merger, mPos2),
          "pos2",
          "EuclidianMoveParameters",
          "pos2",
          "pos2",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Euclidian Move Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field10->reflection = it->second;
        } else {
             printf("Reflection Merger to the subclass Euclidian Move Parameters can't be linked\n");
        }
    }
    fields().push_back(field10);
    /*  */ 
    BoolField* field11 = new BoolField
        (
          Merger::SWITCH3_ID,
          offsetof(Merger, mSwitch3),
          true,
          "switch3",
          "switch3",
          "switch3"
        );
    field11->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field11);
    /*  */ 
    CompositeField* field12 = new CompositeField
        (
          Merger::POS3_ID,
          offsetof(Merger, mPos3),
          "pos3",
          "EuclidianMoveParameters",
          "pos3",
          "pos3",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Euclidian Move Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field12->reflection = it->second;
        } else {
             printf("Reflection Merger to the subclass Euclidian Move Parameters can't be linked\n");
        }
    }
    fields().push_back(field12);
    /*  */ 
    BoolField* field13 = new BoolField
        (
          Merger::SWITCH4_ID,
          offsetof(Merger, mSwitch4),
          true,
          "switch4",
          "switch4",
          "switch4"
        );
    field13->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field13);
    /*  */ 
    CompositeField* field14 = new CompositeField
        (
          Merger::POS4_ID,
          offsetof(Merger, mPos4),
          "pos4",
          "EuclidianMoveParameters",
          "pos4",
          "pos4",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Euclidian Move Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field14->reflection = it->second;
        } else {
             printf("Reflection Merger to the subclass Euclidian Move Parameters can't be linked\n");
        }
    }
    fields().push_back(field14);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Merger")]= &reflection;
   return 0;
}
int Merger::relinkCompositeFields()
{
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Euclidian Move Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[8]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection Merger to the subclass Euclidian Move Parameters can't be linked\n");
        }
    }
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Euclidian Move Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[10]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection Merger to the subclass Euclidian Move Parameters can't be linked\n");
        }
    }
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Euclidian Move Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[12]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection Merger to the subclass Euclidian Move Parameters can't be linked\n");
        }
    }
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Euclidian Move Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[14]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection Merger to the subclass Euclidian Move Parameters can't be linked\n");
        }
    }
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


