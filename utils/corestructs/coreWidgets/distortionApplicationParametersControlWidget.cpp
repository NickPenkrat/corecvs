/**
 * \file distortionApplicationParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "distortionApplicationParametersControlWidget.h"
#include "ui_distortionApplicationParametersControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


DistortionApplicationParametersControlWidget::DistortionApplicationParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::DistortionApplicationParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->forceScaleSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->resizePolicyComboBox, SIGNAL(currentIndexChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->newHSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->newWSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
}

DistortionApplicationParametersControlWidget::~DistortionApplicationParametersControlWidget()
{

    delete mUi;
}

void DistortionApplicationParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    DistortionApplicationParameters *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void DistortionApplicationParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    DistortionApplicationParameters *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}

 /* Composite fields are NOT supported so far */
void DistortionApplicationParametersControlWidget::getParameters(DistortionApplicationParameters& params) const
{

    params.setForceScale       (mUi->forceScaleSpinBox->value());
    params.setResizePolicy     (static_cast<DistortionResizePolicy::DistortionResizePolicy>(mUi->resizePolicyComboBox->currentIndex()));
    params.setNewH             (mUi->newHSpinBox->value());
    params.setNewW             (mUi->newWSpinBox->value());

}

DistortionApplicationParameters *DistortionApplicationParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    DistortionApplicationParameters *result = new DistortionApplicationParameters(
          mUi->forceScaleSpinBox->value()
        , static_cast<DistortionResizePolicy::DistortionResizePolicy>(mUi->resizePolicyComboBox->currentIndex())
        , mUi->newHSpinBox->value()
        , mUi->newWSpinBox->value()
    );
    return result;
}

void DistortionApplicationParametersControlWidget::setParameters(const DistortionApplicationParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->forceScaleSpinBox->setValue(input.forceScale());
    mUi->resizePolicyComboBox->setCurrentIndex(input.resizePolicy());
    mUi->newHSpinBox->setValue(input.newH());
    mUi->newWSpinBox->setValue(input.newW());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void DistortionApplicationParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    DistortionApplicationParameters *inputCasted = static_cast<DistortionApplicationParameters *>(input);
    setParameters(*inputCasted);
}
