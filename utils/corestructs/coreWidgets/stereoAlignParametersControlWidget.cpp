/**
 * \file stereoAlignParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "stereoAlignParametersControlWidget.h"
#include "ui_stereoAlignParametersControlWidget.h"
#include <memory>
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


StereoAlignParametersControlWidget::StereoAlignParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::StereoAlignParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->produceCamerasCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->produceObservationsCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->zdirXSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->zdirYSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->zdirZSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->autoZCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->autoShiftCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->preShiftSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->guessShiftThresholdSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
}

StereoAlignParametersControlWidget::~StereoAlignParametersControlWidget()
{

    delete mUi;
}

void StereoAlignParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<StereoAlignParameters> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void StereoAlignParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<StereoAlignParameters>(createParameters()), rootPath);
}

void StereoAlignParametersControlWidget::getParameters(StereoAlignParameters& params) const
{
    params = *std::unique_ptr<StereoAlignParameters>(createParameters());
}


StereoAlignParameters *StereoAlignParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new StereoAlignParameters(
          mUi->produceCamerasCheckBox->isChecked()
        , mUi->produceObservationsCheckBox->isChecked()
        , mUi->zdirXSpinBox->value()
        , mUi->zdirYSpinBox->value()
        , mUi->zdirZSpinBox->value()
        , mUi->autoZCheckBox->isChecked()
        , mUi->autoShiftCheckBox->isChecked()
        , mUi->preShiftSpinBox->value()
        , mUi->guessShiftThresholdSpinBox->value()
    );
}

void StereoAlignParametersControlWidget::setParameters(const StereoAlignParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->produceCamerasCheckBox->setChecked(input.produceCameras());
    mUi->produceObservationsCheckBox->setChecked(input.produceObservations());
    mUi->zdirXSpinBox->setValue(input.zdirX());
    mUi->zdirYSpinBox->setValue(input.zdirY());
    mUi->zdirZSpinBox->setValue(input.zdirZ());
    mUi->autoZCheckBox->setChecked(input.autoZ());
    mUi->autoShiftCheckBox->setChecked(input.autoShift());
    mUi->preShiftSpinBox->setValue(input.preShift());
    mUi->guessShiftThresholdSpinBox->setValue(input.guessShiftThreshold());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void StereoAlignParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    StereoAlignParameters *inputCasted = static_cast<StereoAlignParameters *>(input);
    setParameters(*inputCasted);
}
