/**
 * \file dummyProviderParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "dummyProviderParametersControlWidget.h"
#include "ui_dummyProviderParametersControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


DummyProviderParametersControlWidget::DummyProviderParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::DummyProviderParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->pathEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->unknownValueSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->planeZeroSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->planeMaxSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
}

DummyProviderParametersControlWidget::~DummyProviderParametersControlWidget()
{

    delete mUi;
}

void DummyProviderParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    DummyProviderParameters *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void DummyProviderParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    DummyProviderParameters *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}


DummyProviderParameters *DummyProviderParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    DummyProviderParameters *result = new DummyProviderParameters(
          mUi->pathEdit->text().toStdString()
        , mUi->unknownValueSpinBox->value()
        , mUi->planeZeroSpinBox->value()
        , mUi->planeMaxSpinBox->value()
    );
    return result;
}

void DummyProviderParametersControlWidget::setParameters(const DummyProviderParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->pathEdit->setText(input.path().c_str());
    mUi->unknownValueSpinBox->setValue(input.unknownValue());
    mUi->planeZeroSpinBox->setValue(input.planeZero());
    mUi->planeMaxSpinBox->setValue(input.planeMax());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void DummyProviderParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    DummyProviderParameters *inputCasted = static_cast<DummyProviderParameters *>(input);
    setParameters(*inputCasted);
}
