/**
 * \file focusEstimationParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "focusEstimationParametersControlWidget.h"
#include "ui_focusEstimationParametersControlWidget.h"
#include <memory>
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


FocusEstimationParametersControlWidget::FocusEstimationParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::FocusEstimationParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->junctionCoefSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->centerCoefSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->produceDebugCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->computeNoiseCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->computeOldStatsCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->edgeThresholdSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
}

FocusEstimationParametersControlWidget::~FocusEstimationParametersControlWidget()
{

    delete mUi;
}

void FocusEstimationParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<FocusEstimationParameters> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void FocusEstimationParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<FocusEstimationParameters>(createParameters()), rootPath);
}

void FocusEstimationParametersControlWidget::getParameters(FocusEstimationParameters& params) const
{
    params = *std::unique_ptr<FocusEstimationParameters>(createParameters());
}


FocusEstimationParameters *FocusEstimationParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new FocusEstimationParameters(
          mUi->junctionCoefSpinBox->value()
        , mUi->centerCoefSpinBox->value()
        , mUi->produceDebugCheckBox->isChecked()
        , mUi->computeNoiseCheckBox->isChecked()
        , mUi->computeOldStatsCheckBox->isChecked()
        , mUi->edgeThresholdSpinBox->value()
    );
}

void FocusEstimationParametersControlWidget::setParameters(const FocusEstimationParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->junctionCoefSpinBox->setValue(input.junctionCoef());
    mUi->centerCoefSpinBox->setValue(input.centerCoef());
    mUi->produceDebugCheckBox->setChecked(input.produceDebug());
    mUi->computeNoiseCheckBox->setChecked(input.computeNoise());
    mUi->computeOldStatsCheckBox->setChecked(input.computeOldStats());
    mUi->edgeThresholdSpinBox->setValue(input.edgeThreshold());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void FocusEstimationParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    FocusEstimationParameters *inputCasted = static_cast<FocusEstimationParameters *>(input);
    setParameters(*inputCasted);
}
