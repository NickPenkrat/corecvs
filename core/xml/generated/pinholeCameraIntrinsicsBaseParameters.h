#ifndef PINHOLE_CAMERA_INTRINSICS_BASE_PARAMETERS_H_
#define PINHOLE_CAMERA_INTRINSICS_BASE_PARAMETERS_H_
/**
 * \file pinholeCameraIntrinsicsBaseParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from projections.xml
 */

#include "core/reflection/reflection.h"
#include "core/reflection/defaultSetter.h"
#include "core/reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Pinhole Camera Intrinsics Base Parameters 
 * Pinhole Camera Intrinsics Base Parameters 
 **/
class PinholeCameraIntrinsicsBaseParameters : public corecvs::BaseReflection<PinholeCameraIntrinsicsBaseParameters>
{
public:
    enum FieldId {
        FOCALX_ID,
        FOCALY_ID,
        PRINCIPALX_ID,
        PRINCIPALY_ID,
        SKEW_ID,
        SIZEX_ID,
        SIZEY_ID,
        DISTORTEDSIZEX_ID,
        DISTORTEDSIZEY_ID,
        PINHOLE_CAMERA_INTRINSICS_BASE_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief focalX 
     * focalX 
     */
    double mFocalX;

    /** 
     * \brief focalY 
     * focalY 
     */
    double mFocalY;

    /** 
     * \brief principalX 
     * The center of projection \f$x_c\f$ 
     */
    double mPrincipalX;

    /** 
     * \brief principalY 
     * The center of projection \f$y_c\f$ 
     */
    double mPrincipalY;

    /** 
     * \brief skew 
     * skew 
     */
    double mSkew;

    /** 
     * \brief sizeX 
     * Model image resolution X 
     */
    double mSizeX;

    /** 
     * \brief sizeY 
     * Model image resolution Y 
     */
    double mSizeY;

    /** 
     * \brief distortedSizeX 
     * Source image resolution X 
     */
    double mDistortedSizeX;

    /** 
     * \brief distortedSizeY 
     * Source image resolution Y 
     */
    double mDistortedSizeY;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    double focalX() const
    {
        return mFocalX;
    }

    double focalY() const
    {
        return mFocalY;
    }

    double principalX() const
    {
        return mPrincipalX;
    }

    double principalY() const
    {
        return mPrincipalY;
    }

    double skew() const
    {
        return mSkew;
    }

    double sizeX() const
    {
        return mSizeX;
    }

    double sizeY() const
    {
        return mSizeY;
    }

    double distortedSizeX() const
    {
        return mDistortedSizeX;
    }

    double distortedSizeY() const
    {
        return mDistortedSizeY;
    }

    /* Section with setters */
    void setFocalX(double focalX)
    {
        mFocalX = focalX;
    }

    void setFocalY(double focalY)
    {
        mFocalY = focalY;
    }

    void setPrincipalX(double principalX)
    {
        mPrincipalX = principalX;
    }

    void setPrincipalY(double principalY)
    {
        mPrincipalY = principalY;
    }

    void setSkew(double skew)
    {
        mSkew = skew;
    }

    void setSizeX(double sizeX)
    {
        mSizeX = sizeX;
    }

    void setSizeY(double sizeY)
    {
        mSizeY = sizeY;
    }

    void setDistortedSizeX(double distortedSizeX)
    {
        mDistortedSizeX = distortedSizeX;
    }

    void setDistortedSizeY(double distortedSizeY)
    {
        mDistortedSizeY = distortedSizeY;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mFocalX,                    static_cast<const corecvs::DoubleField *>(fields()[FOCALX_ID]));
        visitor.visit(mFocalY,                    static_cast<const corecvs::DoubleField *>(fields()[FOCALY_ID]));
        visitor.visit(mPrincipalX,                static_cast<const corecvs::DoubleField *>(fields()[PRINCIPALX_ID]));
        visitor.visit(mPrincipalY,                static_cast<const corecvs::DoubleField *>(fields()[PRINCIPALY_ID]));
        visitor.visit(mSkew,                      static_cast<const corecvs::DoubleField *>(fields()[SKEW_ID]));
        visitor.visit(mSizeX,                     static_cast<const corecvs::DoubleField *>(fields()[SIZEX_ID]));
        visitor.visit(mSizeY,                     static_cast<const corecvs::DoubleField *>(fields()[SIZEY_ID]));
        visitor.visit(mDistortedSizeX,            static_cast<const corecvs::DoubleField *>(fields()[DISTORTEDSIZEX_ID]));
        visitor.visit(mDistortedSizeY,            static_cast<const corecvs::DoubleField *>(fields()[DISTORTEDSIZEY_ID]));
    }

    PinholeCameraIntrinsicsBaseParameters()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    PinholeCameraIntrinsicsBaseParameters(
          double focalX
        , double focalY
        , double principalX
        , double principalY
        , double skew
        , double sizeX
        , double sizeY
        , double distortedSizeX
        , double distortedSizeY
    )
    {
        mFocalX = focalX;
        mFocalY = focalY;
        mPrincipalX = principalX;
        mPrincipalY = principalY;
        mSkew = skew;
        mSizeX = sizeX;
        mSizeY = sizeY;
        mDistortedSizeX = distortedSizeX;
        mDistortedSizeY = distortedSizeY;
    }

    bool operator ==(const PinholeCameraIntrinsicsBaseParameters &other) const 
    {
        if ( !(this->mFocalX == other.mFocalX)) return false;
        if ( !(this->mFocalY == other.mFocalY)) return false;
        if ( !(this->mPrincipalX == other.mPrincipalX)) return false;
        if ( !(this->mPrincipalY == other.mPrincipalY)) return false;
        if ( !(this->mSkew == other.mSkew)) return false;
        if ( !(this->mSizeX == other.mSizeX)) return false;
        if ( !(this->mSizeY == other.mSizeY)) return false;
        if ( !(this->mDistortedSizeX == other.mDistortedSizeX)) return false;
        if ( !(this->mDistortedSizeY == other.mDistortedSizeY)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, PinholeCameraIntrinsicsBaseParameters &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //PINHOLE_CAMERA_INTRINSICS_BASE_PARAMETERS_H_
