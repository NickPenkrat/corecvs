#ifndef ITERATIVE_RECONSTRUCTION_FEATURE_SELECTION_PARAMS_H_
#define ITERATIVE_RECONSTRUCTION_FEATURE_SELECTION_PARAMS_H_
/**
 * \file iterativeReconstructionFeatureSelectionParams.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Iterative Reconstruction Feature Selection Params 
 * Iterative Reconstruction Feature Selection Params 
 **/
class IterativeReconstructionFeatureSelectionParams : public BaseReflection<IterativeReconstructionFeatureSelectionParams>
{
public:
    enum FieldId {
        INLIERTHRESHOLD_ID,
        TRACKINLIERTHRESHOLD_ID,
        DISTANCELIMIT_ID,
        DETECTOR_ID,
        DESCRIPTOR_ID,
        MATCHER_ID,
        B2BTHRESHOLD_ID,
        RMSEPRUNINGSCALER_ID,
        MAXPRUNINGSCALER_ID,
        ITERATIVE_RECONSTRUCTION_FEATURE_SELECTION_PARAMS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief inlierThreshold 
     * Inlier threshold 
     */
    double mInlierThreshold;

    /** 
     * \brief trackInlierThreshold 
     * Track append threshold 
     */
    double mTrackInlierThreshold;

    /** 
     * \brief distanceLimit 
     * Track distance limit 
     */
    double mDistanceLimit;

    /** 
     * \brief detector 
     * Detector 
     */
    std::string mDetector;

    /** 
     * \brief descriptor 
     * Descriptor 
     */
    std::string mDescriptor;

    /** 
     * \brief matcher 
     * Matcher 
     */
    std::string mMatcher;

    /** 
     * \brief b2bThreshold 
     * b2b threshold 
     */
    double mB2bThreshold;

    /** 
     * \brief rmsePruningScaler 
     * RMSE pruning scaler 
     */
    double mRmsePruningScaler;

    /** 
     * \brief maxPruningScaler 
     * Max pruning scaler 
     */
    double mMaxPruningScaler;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    double inlierThreshold() const
    {
        return mInlierThreshold;
    }

    double trackInlierThreshold() const
    {
        return mTrackInlierThreshold;
    }

    double distanceLimit() const
    {
        return mDistanceLimit;
    }

    std::string detector() const
    {
        return mDetector;
    }

    std::string descriptor() const
    {
        return mDescriptor;
    }

    std::string matcher() const
    {
        return mMatcher;
    }

    double b2bThreshold() const
    {
        return mB2bThreshold;
    }

    double rmsePruningScaler() const
    {
        return mRmsePruningScaler;
    }

    double maxPruningScaler() const
    {
        return mMaxPruningScaler;
    }

    /* Section with setters */
    void setInlierThreshold(double inlierThreshold)
    {
        mInlierThreshold = inlierThreshold;
    }

    void setTrackInlierThreshold(double trackInlierThreshold)
    {
        mTrackInlierThreshold = trackInlierThreshold;
    }

    void setDistanceLimit(double distanceLimit)
    {
        mDistanceLimit = distanceLimit;
    }

    void setDetector(std::string detector)
    {
        mDetector = detector;
    }

    void setDescriptor(std::string descriptor)
    {
        mDescriptor = descriptor;
    }

    void setMatcher(std::string matcher)
    {
        mMatcher = matcher;
    }

    void setB2bThreshold(double b2bThreshold)
    {
        mB2bThreshold = b2bThreshold;
    }

    void setRmsePruningScaler(double rmsePruningScaler)
    {
        mRmsePruningScaler = rmsePruningScaler;
    }

    void setMaxPruningScaler(double maxPruningScaler)
    {
        mMaxPruningScaler = maxPruningScaler;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mInlierThreshold,           static_cast<const DoubleField *>  (fields()[INLIERTHRESHOLD_ID]));
        visitor.visit(mTrackInlierThreshold,      static_cast<const DoubleField *>  (fields()[TRACKINLIERTHRESHOLD_ID]));
        visitor.visit(mDistanceLimit,             static_cast<const DoubleField *>  (fields()[DISTANCELIMIT_ID]));
        visitor.visit(mDetector,                  static_cast<const StringField *>  (fields()[DETECTOR_ID]));
        visitor.visit(mDescriptor,                static_cast<const StringField *>  (fields()[DESCRIPTOR_ID]));
        visitor.visit(mMatcher,                   static_cast<const StringField *>  (fields()[MATCHER_ID]));
        visitor.visit(mB2bThreshold,              static_cast<const DoubleField *>  (fields()[B2BTHRESHOLD_ID]));
        visitor.visit(mRmsePruningScaler,         static_cast<const DoubleField *>  (fields()[RMSEPRUNINGSCALER_ID]));
        visitor.visit(mMaxPruningScaler,          static_cast<const DoubleField *>  (fields()[MAXPRUNINGSCALER_ID]));
    }

    IterativeReconstructionFeatureSelectionParams()
    {
        DefaultSetter setter;
        accept(setter);
    }

    IterativeReconstructionFeatureSelectionParams(
          double inlierThreshold
        , double trackInlierThreshold
        , double distanceLimit
        , std::string detector
        , std::string descriptor
        , std::string matcher
        , double b2bThreshold
        , double rmsePruningScaler
        , double maxPruningScaler
    )
    {
        mInlierThreshold = inlierThreshold;
        mTrackInlierThreshold = trackInlierThreshold;
        mDistanceLimit = distanceLimit;
        mDetector = detector;
        mDescriptor = descriptor;
        mMatcher = matcher;
        mB2bThreshold = b2bThreshold;
        mRmsePruningScaler = rmsePruningScaler;
        mMaxPruningScaler = maxPruningScaler;
    }

    friend ostream& operator << (ostream &out, IterativeReconstructionFeatureSelectionParams &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //ITERATIVE_RECONSTRUCTION_FEATURE_SELECTION_PARAMS_H_
