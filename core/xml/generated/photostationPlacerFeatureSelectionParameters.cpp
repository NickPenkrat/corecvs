/**
 * \file photostationPlacerFeatureSelectionParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "photostationPlacerFeatureSelectionParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<PhotostationPlacerFeatureSelectionParameters>::reflection = Reflection();
template<>
int BaseReflection<PhotostationPlacerFeatureSelectionParameters>::dummy = PhotostationPlacerFeatureSelectionParameters::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN

int PhotostationPlacerFeatureSelectionParameters::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Photostation Placer Feature Selection Parameters",
        "Photostation Placer Feature Selection Parameters",
        ""
    );
     

    fields().push_back(
        new DoubleField
        (
          PhotostationPlacerFeatureSelectionParameters::INLIERTHRESHOLD_ID,
          offsetof(PhotostationPlacerFeatureSelectionParameters, mInlierThreshold),
          5,
          "inlierThreshold",
          "inlierThreshold",
          "Inlier threshold",
          true,
         -50000,
         50000
        )
    );
    fields().push_back(
        new DoubleField
        (
          PhotostationPlacerFeatureSelectionParameters::TRACKINLIERTHRESHOLD_ID,
          offsetof(PhotostationPlacerFeatureSelectionParameters, mTrackInlierThreshold),
          3,
          "trackInlierThreshold",
          "trackInlierThreshold",
          "Track append threshold",
          true,
         -50000,
         50000
        )
    );
    fields().push_back(
        new DoubleField
        (
          PhotostationPlacerFeatureSelectionParameters::DISTANCELIMIT_ID,
          offsetof(PhotostationPlacerFeatureSelectionParameters, mDistanceLimit),
          1000,
          "distanceLimit",
          "distanceLimit",
          "Track distance limit",
          true,
         -50000,
         50000
        )
    );
    fields().push_back(
        new StringField
        (
          PhotostationPlacerFeatureSelectionParameters::DETECTOR_ID,
          offsetof(PhotostationPlacerFeatureSelectionParameters, mDetector),
          "ORB",
          "detector",
          "detector",
          "Detector"
        )
    );
    fields().push_back(
        new StringField
        (
          PhotostationPlacerFeatureSelectionParameters::DESCRIPTOR_ID,
          offsetof(PhotostationPlacerFeatureSelectionParameters, mDescriptor),
          "ORB",
          "descriptor",
          "descriptor",
          "Descriptor"
        )
    );
    fields().push_back(
        new StringField
        (
          PhotostationPlacerFeatureSelectionParameters::MATCHER_ID,
          offsetof(PhotostationPlacerFeatureSelectionParameters, mMatcher),
          "",
          "matcher",
          "matcher",
          "Matcher"
        )
    );
    fields().push_back(
        new DoubleField
        (
          PhotostationPlacerFeatureSelectionParameters::B2BTHRESHOLD_ID,
          offsetof(PhotostationPlacerFeatureSelectionParameters, mB2bThreshold),
          0.9,
          "b2bThreshold",
          "b2bThreshold",
          "b2b threshold"
        )
    );
    fields().push_back(
        new DoubleField
        (
          PhotostationPlacerFeatureSelectionParameters::RMSEPRUNINGSCALER_ID,
          offsetof(PhotostationPlacerFeatureSelectionParameters, mRmsePruningScaler),
          3,
          "rmsePruningScaler",
          "rmsePruningScaler",
          "RMSE pruning scaler"
        )
    );
    fields().push_back(
        new DoubleField
        (
          PhotostationPlacerFeatureSelectionParameters::MAXPRUNINGSCALER_ID,
          offsetof(PhotostationPlacerFeatureSelectionParameters, mMaxPruningScaler),
          5,
          "maxPruningScaler",
          "maxPruningScaler",
          "Max pruning scaler"
        )
    );
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


