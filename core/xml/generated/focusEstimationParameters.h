#ifndef FOCUS_ESTIMATION_PARAMETERS_H_
#define FOCUS_ESTIMATION_PARAMETERS_H_
/**
 * \file focusEstimationParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Focus Estimation Parameters 
 * Focus Estimation Parameters 
 **/
class FocusEstimationParameters : public corecvs::BaseReflection<FocusEstimationParameters>
{
public:
    enum FieldId {
        JUNCTIONCOEF_ID,
        CENTER_COEF_ID,
        PRODUCE_DEBUG_ID,
        FOCUS_ESTIMATION_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief JunctionCoef 
     * JunctionCoef 
     */
    double mJunctionCoef;

    /** 
     * \brief Center Coef 
     * Center Coef 
     */
    double mCenterCoef;

    /** 
     * \brief Produce Debug 
     * Produce Debug 
     */
    bool mProduceDebug;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    double junctionCoef() const
    {
        return mJunctionCoef;
    }

    double centerCoef() const
    {
        return mCenterCoef;
    }

    bool produceDebug() const
    {
        return mProduceDebug;
    }

    /* Section with setters */
    void setJunctionCoef(double junctionCoef)
    {
        mJunctionCoef = junctionCoef;
    }

    void setCenterCoef(double centerCoef)
    {
        mCenterCoef = centerCoef;
    }

    void setProduceDebug(bool produceDebug)
    {
        mProduceDebug = produceDebug;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mJunctionCoef,              static_cast<const corecvs::DoubleField *>(fields()[JUNCTIONCOEF_ID]));
        visitor.visit(mCenterCoef,                static_cast<const corecvs::DoubleField *>(fields()[CENTER_COEF_ID]));
        visitor.visit(mProduceDebug,              static_cast<const corecvs::BoolField *>(fields()[PRODUCE_DEBUG_ID]));
    }

    FocusEstimationParameters()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    FocusEstimationParameters(
          double junctionCoef
        , double centerCoef
        , bool produceDebug
    )
    {
        mJunctionCoef = junctionCoef;
        mCenterCoef = centerCoef;
        mProduceDebug = produceDebug;
    }

    friend std::ostream& operator << (std::ostream &out, FocusEstimationParameters &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //FOCUS_ESTIMATION_PARAMETERS_H_
