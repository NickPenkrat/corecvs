/**
 * \file featureDetectionParams.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "featureDetectionParams.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<FeatureDetectionParams>::reflection = Reflection();
template<>
int BaseReflection<FeatureDetectionParams>::dummy = FeatureDetectionParams::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN

int FeatureDetectionParams::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Feature Detection Params",
        "Feature Detection Params",
        ""
    );
     

    StringField* field0 = new StringField
        (
          FeatureDetectionParams::DETECTOR_ID,
          offsetof(FeatureDetectionParams, mDetector),
          "ORB",
          "detector",
          "detector",
          "detector"
        );
    field0->precision=-1;
    fields().push_back(field0);
    /*  */ 
    StringField* field1 = new StringField
        (
          FeatureDetectionParams::DESCRIPTOR_ID,
          offsetof(FeatureDetectionParams, mDescriptor),
          "ORB",
          "descriptor",
          "descriptor",
          "descriptor"
        );
    field1->precision=-1;
    fields().push_back(field1);
    /*  */ 
    StringField* field2 = new StringField
        (
          FeatureDetectionParams::MATCHER_ID,
          offsetof(FeatureDetectionParams, mMatcher),
          "BF",
          "matcher",
          "matcher",
          "matcher"
        );
    field2->precision=-1;
    fields().push_back(field2);
    /*  */ 
    DoubleField* field3 = new DoubleField
        (
          FeatureDetectionParams::B2BTHRESHOLD_ID,
          offsetof(FeatureDetectionParams, mB2bThreshold),
          0.9,
          "b2bThreshold",
          "b2bThreshold",
          "b2bThreshold",
          true,
         0,
         256
        );
    field3->widgetHint=BaseField::SPIN_BOX;
    field3->precision=6;
    fields().push_back(field3);
    /*  */ 
    BoolField* field4 = new BoolField
        (
          FeatureDetectionParams::MATCHF2F_ID,
          offsetof(FeatureDetectionParams, mMatchF2F),
          false,
          "matchF2F",
          "matchF2F",
          "matchF2F"
        );
    field4->widgetHint=BaseField::CHECK_BOX;
    field4->precision=-1;
    fields().push_back(field4);
    /*  */ 
    StringField* field5 = new StringField
        (
          FeatureDetectionParams::PARAMETERS_ID,
          offsetof(FeatureDetectionParams, mParameters),
          "",
          "parameters",
          "parameters",
          "Additional parameters"
        );
    field5->precision=-1;
    fields().push_back(field5);
    /*  */ 
    BoolField* field6 = new BoolField
        (
          FeatureDetectionParams::PLOTTRACKS_ID,
          offsetof(FeatureDetectionParams, mPlotTracks),
          false,
          "plotTracks",
          "plotTracks",
          "Draw tracks on source images"
        );
    field6->widgetHint=BaseField::CHECK_BOX;
    field6->precision=-1;
    fields().push_back(field6);
    /*  */ 
    BoolField* field7 = new BoolField
        (
          FeatureDetectionParams::THRESHOLDDISTANCE_ID,
          offsetof(FeatureDetectionParams, mThresholdDistance),
          false,
          "thresholdDistance",
          "thresholdDistance",
          "Threshold by descriptor distance instead of b2b ratio"
        );
    field7->widgetHint=BaseField::CHECK_BOX;
    field7->precision=-1;
    fields().push_back(field7);
    /*  */ 
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


