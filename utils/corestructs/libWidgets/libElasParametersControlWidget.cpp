/**
 * \file libElasParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "libElasParametersControlWidget.h"
#include "ui_libElasParametersControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


LibElasParametersControlWidget::LibElasParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::LibElasParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->dispMinSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->dispMaxSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->supportThresholdSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->supportTextureSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->candidateStepsizeSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->inconWindowSizeSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->inconThresholdSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->inconMinSupportSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->addCornersCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->gridSizeSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->betaSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->gammaSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->sigmaSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->sRadiusSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->matchTextureSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->lRThresholdSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->speckleSimThresholdSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->speckleSizeSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->ipolGapWidthSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->filterMedianCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->filterAdaptiveMeanCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
}

LibElasParametersControlWidget::~LibElasParametersControlWidget()
{

    delete mUi;
}

void LibElasParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    LibElasParameters *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void LibElasParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    LibElasParameters *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}


LibElasParameters *LibElasParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    LibElasParameters *result = new LibElasParameters(
          mUi->dispMinSpinBox->value()
        , mUi->dispMaxSpinBox->value()
        , mUi->supportThresholdSpinBox->value()
        , mUi->supportTextureSpinBox->value()
        , mUi->candidateStepsizeSpinBox->value()
        , mUi->inconWindowSizeSpinBox->value()
        , mUi->inconThresholdSpinBox->value()
        , mUi->inconMinSupportSpinBox->value()
        , mUi->addCornersCheckBox->isChecked()
        , mUi->gridSizeSpinBox->value()
        , mUi->betaSpinBox->value()
        , mUi->gammaSpinBox->value()
        , mUi->sigmaSpinBox->value()
        , mUi->sRadiusSpinBox->value()
        , mUi->matchTextureSpinBox->value()
        , mUi->lRThresholdSpinBox->value()
        , mUi->speckleSimThresholdSpinBox->value()
        , mUi->speckleSizeSpinBox->value()
        , mUi->ipolGapWidthSpinBox->value()
        , mUi->filterMedianCheckBox->isChecked()
        , mUi->filterAdaptiveMeanCheckBox->isChecked()
    );
    return result;
}

void LibElasParametersControlWidget::setParameters(const LibElasParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->dispMinSpinBox->setValue(input.dispMin());
    mUi->dispMaxSpinBox->setValue(input.dispMax());
    mUi->supportThresholdSpinBox->setValue(input.supportThreshold());
    mUi->supportTextureSpinBox->setValue(input.supportTexture());
    mUi->candidateStepsizeSpinBox->setValue(input.candidateStepsize());
    mUi->inconWindowSizeSpinBox->setValue(input.inconWindowSize());
    mUi->inconThresholdSpinBox->setValue(input.inconThreshold());
    mUi->inconMinSupportSpinBox->setValue(input.inconMinSupport());
    mUi->addCornersCheckBox->setChecked(input.addCorners());
    mUi->gridSizeSpinBox->setValue(input.gridSize());
    mUi->betaSpinBox->setValue(input.beta());
    mUi->gammaSpinBox->setValue(input.gamma());
    mUi->sigmaSpinBox->setValue(input.sigma());
    mUi->sRadiusSpinBox->setValue(input.sRadius());
    mUi->matchTextureSpinBox->setValue(input.matchTexture());
    mUi->lRThresholdSpinBox->setValue(input.lRThreshold());
    mUi->speckleSimThresholdSpinBox->setValue(input.speckleSimThreshold());
    mUi->speckleSizeSpinBox->setValue(input.speckleSize());
    mUi->ipolGapWidthSpinBox->setValue(input.ipolGapWidth());
    mUi->filterMedianCheckBox->setChecked(input.filterMedian());
    mUi->filterAdaptiveMeanCheckBox->setChecked(input.filterAdaptiveMean());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void LibElasParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    LibElasParameters *inputCasted = static_cast<LibElasParameters *>(input);
    setParameters(*inputCasted);
}
