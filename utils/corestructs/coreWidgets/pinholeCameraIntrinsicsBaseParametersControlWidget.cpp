/**
 * \file pinholeCameraIntrinsicsBaseParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "pinholeCameraIntrinsicsBaseParametersControlWidget.h"
#include "ui_pinholeCameraIntrinsicsBaseParametersControlWidget.h"
#include <memory>
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"

#include "vector2dParametersControlWidget.h"
#include "vector2dParametersControlWidget.h"

PinholeCameraIntrinsicsBaseParametersControlWidget::PinholeCameraIntrinsicsBaseParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::PinholeCameraIntrinsicsBaseParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->fxSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->fySpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->cxSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->cySpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->skewSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->sizeControlWidget, SIGNAL(paramsChanged()), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->distortedSizeControlWidget, SIGNAL(paramsChanged()), this, SIGNAL(paramsChanged()));
}

PinholeCameraIntrinsicsBaseParametersControlWidget::~PinholeCameraIntrinsicsBaseParametersControlWidget()
{

    delete mUi;
}

void PinholeCameraIntrinsicsBaseParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<PinholeCameraIntrinsicsBaseParameters> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void PinholeCameraIntrinsicsBaseParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<PinholeCameraIntrinsicsBaseParameters>(createParameters()), rootPath);
}

void PinholeCameraIntrinsicsBaseParametersControlWidget::getParameters(PinholeCameraIntrinsicsBaseParameters& params) const
{
    params = *std::unique_ptr<PinholeCameraIntrinsicsBaseParameters>(createParameters());
}


PinholeCameraIntrinsicsBaseParameters *PinholeCameraIntrinsicsBaseParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new PinholeCameraIntrinsicsBaseParameters(
          mUi->fxSpinBox->value()
        , mUi->fySpinBox->value()
        , mUi->cxSpinBox->value()
        , mUi->cySpinBox->value()
        , mUi->skewSpinBox->value()
        , *std::unique_ptr<Vector2dParameters>(mUi->sizeControlWidget->createParameters())
        , *std::unique_ptr<Vector2dParameters>(mUi->distortedSizeControlWidget->createParameters())
    );
}

void PinholeCameraIntrinsicsBaseParametersControlWidget::setParameters(const PinholeCameraIntrinsicsBaseParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->fxSpinBox->setValue(input.fx());
    mUi->fySpinBox->setValue(input.fy());
    mUi->cxSpinBox->setValue(input.cx());
    mUi->cySpinBox->setValue(input.cy());
    mUi->skewSpinBox->setValue(input.skew());
    mUi->sizeControlWidget->setParameters(input.size());
    mUi->distortedSizeControlWidget->setParameters(input.distortedSize());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void PinholeCameraIntrinsicsBaseParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    PinholeCameraIntrinsicsBaseParameters *inputCasted = static_cast<PinholeCameraIntrinsicsBaseParameters *>(input);
    setParameters(*inputCasted);
}
