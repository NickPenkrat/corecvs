#ifndef PHOTOSTATION_PLACER_ESSENTIAL_FILTER_PARAMETERS_H_
#define PHOTOSTATION_PLACER_ESSENTIAL_FILTER_PARAMETERS_H_
/**
 * \file photostationPlacerEssentialFilterParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Photostation Placer Essential Filter Parameters 
 * Photostation Placer Essential Filter Parameters 
 **/
class PhotostationPlacerEssentialFilterParameters : public BaseReflection<PhotostationPlacerEssentialFilterParameters>
{
public:
    enum FieldId {
        B2BRANSACP5RPTHRESHOLD_ID,
        INLIERP5RPTHRESHOLD_ID,
        MAXESSENTIALRANSACITERATIONS_ID,
        B2BRANSACP6RPTHRESHOLD_ID,
        RUNESSENTIALFILTERING_ID,
        ESSENTIALTARGETGAMMA_ID,
        PHOTOSTATION_PLACER_ESSENTIAL_FILTER_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief b2bRansacP5RPThreshold 
     * Best-2nd best essential estimator threshold 
     */
    double mB2bRansacP5RPThreshold;

    /** 
     * \brief inlierP5RPThreshold 
     * Inlier threshold 
     */
    double mInlierP5RPThreshold;

    /** 
     * \brief maxEssentialRansacIterations 
     * Maximal essential estimator rounds 
     */
    int mMaxEssentialRansacIterations;

    /** 
     * \brief b2bRansacP6RPThreshold 
     * Best-2nd best relative pose estimator threshold 
     */
    double mB2bRansacP6RPThreshold;

    /** 
     * \brief runEssentialFiltering 
     * Run essential filtering prior relative pose estimation 
     */
    bool mRunEssentialFiltering;

    /** 
     * \brief essentialTargetGamma 
     * essentialTargetGamma 
     */
    double mEssentialTargetGamma;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    double b2bRansacP5RPThreshold() const
    {
        return mB2bRansacP5RPThreshold;
    }

    double inlierP5RPThreshold() const
    {
        return mInlierP5RPThreshold;
    }

    int maxEssentialRansacIterations() const
    {
        return mMaxEssentialRansacIterations;
    }

    double b2bRansacP6RPThreshold() const
    {
        return mB2bRansacP6RPThreshold;
    }

    bool runEssentialFiltering() const
    {
        return mRunEssentialFiltering;
    }

    double essentialTargetGamma() const
    {
        return mEssentialTargetGamma;
    }

    /* Section with setters */
    void setB2bRansacP5RPThreshold(double b2bRansacP5RPThreshold)
    {
        mB2bRansacP5RPThreshold = b2bRansacP5RPThreshold;
    }

    void setInlierP5RPThreshold(double inlierP5RPThreshold)
    {
        mInlierP5RPThreshold = inlierP5RPThreshold;
    }

    void setMaxEssentialRansacIterations(int maxEssentialRansacIterations)
    {
        mMaxEssentialRansacIterations = maxEssentialRansacIterations;
    }

    void setB2bRansacP6RPThreshold(double b2bRansacP6RPThreshold)
    {
        mB2bRansacP6RPThreshold = b2bRansacP6RPThreshold;
    }

    void setRunEssentialFiltering(bool runEssentialFiltering)
    {
        mRunEssentialFiltering = runEssentialFiltering;
    }

    void setEssentialTargetGamma(double essentialTargetGamma)
    {
        mEssentialTargetGamma = essentialTargetGamma;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mB2bRansacP5RPThreshold,    static_cast<const DoubleField *>  (fields()[B2BRANSACP5RPTHRESHOLD_ID]));
        visitor.visit(mInlierP5RPThreshold,       static_cast<const DoubleField *>  (fields()[INLIERP5RPTHRESHOLD_ID]));
        visitor.visit(mMaxEssentialRansacIterations, static_cast<const IntField *>     (fields()[MAXESSENTIALRANSACITERATIONS_ID]));
        visitor.visit(mB2bRansacP6RPThreshold,    static_cast<const DoubleField *>  (fields()[B2BRANSACP6RPTHRESHOLD_ID]));
        visitor.visit(mRunEssentialFiltering,     static_cast<const BoolField *>    (fields()[RUNESSENTIALFILTERING_ID]));
        visitor.visit(mEssentialTargetGamma,      static_cast<const DoubleField *>  (fields()[ESSENTIALTARGETGAMMA_ID]));
    }

    PhotostationPlacerEssentialFilterParameters()
    {
        DefaultSetter setter;
        accept(setter);
    }

    PhotostationPlacerEssentialFilterParameters(
          double b2bRansacP5RPThreshold
        , double inlierP5RPThreshold
        , int maxEssentialRansacIterations
        , double b2bRansacP6RPThreshold
        , bool runEssentialFiltering
        , double essentialTargetGamma
    )
    {
        mB2bRansacP5RPThreshold = b2bRansacP5RPThreshold;
        mInlierP5RPThreshold = inlierP5RPThreshold;
        mMaxEssentialRansacIterations = maxEssentialRansacIterations;
        mB2bRansacP6RPThreshold = b2bRansacP6RPThreshold;
        mRunEssentialFiltering = runEssentialFiltering;
        mEssentialTargetGamma = essentialTargetGamma;
    }

    friend ostream& operator << (ostream &out, PhotostationPlacerEssentialFilterParameters &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //PHOTOSTATION_PLACER_ESSENTIAL_FILTER_PARAMETERS_H_
