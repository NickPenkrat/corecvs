#ifndef RECONSTRUCTION_FUNCTOR_OPTIMIZATION_H_
#define RECONSTRUCTION_FUNCTOR_OPTIMIZATION_H_
/**
 * \file reconstructionFunctorOptimization.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Reconstruction Functor Optimization 
 * Reconstruction Functor Optimization 
 **/
class ReconstructionFunctorOptimization : public BaseReflection<ReconstructionFunctorOptimization>
{
public:
    enum FieldId {
        NON_DEGENERATE_ORIENTATIONS_ID,
        DEGENERATE_ORIENTATIONS_ID,
        NON_DEGENERATE_TRANSLATIONS_ID,
        DEGENERATE_TRANSLATIONS_ID,
        FOCALS_ID,
        PRINCIPALS_ID,
        POINTS_ID,
        TUNE_GPS_ID,
        RECONSTRUCTION_FUNCTOR_OPTIMIZATION_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief NON_DEGENERATE_ORIENTATIONS 
     * Orientations of all cameras except first 
     */
    bool mNON_DEGENERATE_ORIENTATIONS;

    /** 
     * \brief DEGENERATE_ORIENTATIONS 
     * Orientation of first camera 
     */
    bool mDEGENERATE_ORIENTATIONS;

    /** 
     * \brief NON_DEGENERATE_TRANSLATIONS 
     * Translations of all cameras except first 
     */
    bool mNON_DEGENERATE_TRANSLATIONS;

    /** 
     * \brief DEGENERATE_TRANSLATIONS 
     * Translation of first camera 
     */
    bool mDEGENERATE_TRANSLATIONS;

    /** 
     * \brief FOCALS 
     * Camera focals in multicamera 
     */
    bool mFOCALS;

    /** 
     * \brief PRINCIPALS 
     * Camera principals in multicamera 
     */
    bool mPRINCIPALS;

    /** 
     * \brief POINTS 
     * 3D points 
     */
    bool mPOINTS;

    /** 
     * \brief TUNE_GPS 
     * Allow shifting of GPS-initialized cameras 
     */
    bool mTUNE_GPS;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    bool nON_DEGENERATE_ORIENTATIONS() const
    {
        return mNON_DEGENERATE_ORIENTATIONS;
    }

    bool dEGENERATE_ORIENTATIONS() const
    {
        return mDEGENERATE_ORIENTATIONS;
    }

    bool nON_DEGENERATE_TRANSLATIONS() const
    {
        return mNON_DEGENERATE_TRANSLATIONS;
    }

    bool dEGENERATE_TRANSLATIONS() const
    {
        return mDEGENERATE_TRANSLATIONS;
    }

    bool fOCALS() const
    {
        return mFOCALS;
    }

    bool pRINCIPALS() const
    {
        return mPRINCIPALS;
    }

    bool pOINTS() const
    {
        return mPOINTS;
    }

    bool tUNE_GPS() const
    {
        return mTUNE_GPS;
    }

    /* Section with setters */
    void setNON_DEGENERATE_ORIENTATIONS(bool nON_DEGENERATE_ORIENTATIONS)
    {
        mNON_DEGENERATE_ORIENTATIONS = nON_DEGENERATE_ORIENTATIONS;
    }

    void setDEGENERATE_ORIENTATIONS(bool dEGENERATE_ORIENTATIONS)
    {
        mDEGENERATE_ORIENTATIONS = dEGENERATE_ORIENTATIONS;
    }

    void setNON_DEGENERATE_TRANSLATIONS(bool nON_DEGENERATE_TRANSLATIONS)
    {
        mNON_DEGENERATE_TRANSLATIONS = nON_DEGENERATE_TRANSLATIONS;
    }

    void setDEGENERATE_TRANSLATIONS(bool dEGENERATE_TRANSLATIONS)
    {
        mDEGENERATE_TRANSLATIONS = dEGENERATE_TRANSLATIONS;
    }

    void setFOCALS(bool fOCALS)
    {
        mFOCALS = fOCALS;
    }

    void setPRINCIPALS(bool pRINCIPALS)
    {
        mPRINCIPALS = pRINCIPALS;
    }

    void setPOINTS(bool pOINTS)
    {
        mPOINTS = pOINTS;
    }

    void setTUNE_GPS(bool tUNE_GPS)
    {
        mTUNE_GPS = tUNE_GPS;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mNON_DEGENERATE_ORIENTATIONS, static_cast<const BoolField *>    (fields()[NON_DEGENERATE_ORIENTATIONS_ID]));
        visitor.visit(mDEGENERATE_ORIENTATIONS,   static_cast<const BoolField *>    (fields()[DEGENERATE_ORIENTATIONS_ID]));
        visitor.visit(mNON_DEGENERATE_TRANSLATIONS, static_cast<const BoolField *>    (fields()[NON_DEGENERATE_TRANSLATIONS_ID]));
        visitor.visit(mDEGENERATE_TRANSLATIONS,   static_cast<const BoolField *>    (fields()[DEGENERATE_TRANSLATIONS_ID]));
        visitor.visit(mFOCALS,                    static_cast<const BoolField *>    (fields()[FOCALS_ID]));
        visitor.visit(mPRINCIPALS,                static_cast<const BoolField *>    (fields()[PRINCIPALS_ID]));
        visitor.visit(mPOINTS,                    static_cast<const BoolField *>    (fields()[POINTS_ID]));
        visitor.visit(mTUNE_GPS,                  static_cast<const BoolField *>    (fields()[TUNE_GPS_ID]));
    }

    ReconstructionFunctorOptimization()
    {
        DefaultSetter setter;
        accept(setter);
    }

    ReconstructionFunctorOptimization(
          bool nON_DEGENERATE_ORIENTATIONS
        , bool dEGENERATE_ORIENTATIONS
        , bool nON_DEGENERATE_TRANSLATIONS
        , bool dEGENERATE_TRANSLATIONS
        , bool fOCALS
        , bool pRINCIPALS
        , bool pOINTS
        , bool tUNE_GPS
    )
    {
        mNON_DEGENERATE_ORIENTATIONS = nON_DEGENERATE_ORIENTATIONS;
        mDEGENERATE_ORIENTATIONS = dEGENERATE_ORIENTATIONS;
        mNON_DEGENERATE_TRANSLATIONS = nON_DEGENERATE_TRANSLATIONS;
        mDEGENERATE_TRANSLATIONS = dEGENERATE_TRANSLATIONS;
        mFOCALS = fOCALS;
        mPRINCIPALS = pRINCIPALS;
        mPOINTS = pOINTS;
        mTUNE_GPS = tUNE_GPS;
    }

    friend ostream& operator << (ostream &out, ReconstructionFunctorOptimization &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //RECONSTRUCTION_FUNCTOR_OPTIMIZATION_H_
