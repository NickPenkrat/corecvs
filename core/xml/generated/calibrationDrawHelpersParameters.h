#ifndef CALIBRATION_DRAW_HELPERS_PARAMETERS_H_
#define CALIBRATION_DRAW_HELPERS_PARAMETERS_H_
/**
 * \file calibrationDrawHelpersParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Calibration Draw Helpers Parameters 
 * Calibration Draw Helpers Parameters 
 **/
class CalibrationDrawHelpersParameters : public BaseReflection<CalibrationDrawHelpersParameters>
{
public:
    enum FieldId {
        PRINTNAMES_ID,
        BILLBOARDNAMES_ID,
        PREFER_REPROJECTED_ID,
        FORCE_KNOWN_ID,
        PRIVATECOLOR_ID,
        LARGEPOINTS_ID,
        DRAWFIXTURECAMS_ID,
        DRAWOBSERVATIONS_ID,
        DRAWRAYS_ID,
        CALIBRATION_DRAW_HELPERS_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief printNames 
     * printNames 
     */
    bool mPrintNames;

    /** 
     * \brief billboardNames 
     * billboardNames 
     */
    bool mBillboardNames;

    /** 
     * \brief Prefer Reprojected 
     * Prefer Reprojected 
     */
    bool mPreferReprojected;

    /** 
     * \brief Force Known 
     * Force Known 
     */
    bool mForceKnown;

    /** 
     * \brief privateColor 
     * privateColor 
     */
    bool mPrivateColor;

    /** 
     * \brief largePoints 
     * largePoints 
     */
    bool mLargePoints;

    /** 
     * \brief drawFixtureCams 
     * drawFixtureCams 
     */
    bool mDrawFixtureCams;

    /** 
     * \brief drawObservations 
     * drawObservations 
     */
    bool mDrawObservations;

    /** 
     * \brief drawRays 
     * drawRays 
     */
    bool mDrawRays;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    bool printNames() const
    {
        return mPrintNames;
    }

    bool billboardNames() const
    {
        return mBillboardNames;
    }

    bool preferReprojected() const
    {
        return mPreferReprojected;
    }

    bool forceKnown() const
    {
        return mForceKnown;
    }

    bool privateColor() const
    {
        return mPrivateColor;
    }

    bool largePoints() const
    {
        return mLargePoints;
    }

    bool drawFixtureCams() const
    {
        return mDrawFixtureCams;
    }

    bool drawObservations() const
    {
        return mDrawObservations;
    }

    bool drawRays() const
    {
        return mDrawRays;
    }

    /* Section with setters */
    void setPrintNames(bool printNames)
    {
        mPrintNames = printNames;
    }

    void setBillboardNames(bool billboardNames)
    {
        mBillboardNames = billboardNames;
    }

    void setPreferReprojected(bool preferReprojected)
    {
        mPreferReprojected = preferReprojected;
    }

    void setForceKnown(bool forceKnown)
    {
        mForceKnown = forceKnown;
    }

    void setPrivateColor(bool privateColor)
    {
        mPrivateColor = privateColor;
    }

    void setLargePoints(bool largePoints)
    {
        mLargePoints = largePoints;
    }

    void setDrawFixtureCams(bool drawFixtureCams)
    {
        mDrawFixtureCams = drawFixtureCams;
    }

    void setDrawObservations(bool drawObservations)
    {
        mDrawObservations = drawObservations;
    }

    void setDrawRays(bool drawRays)
    {
        mDrawRays = drawRays;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mPrintNames,                static_cast<const BoolField *>    (fields()[PRINTNAMES_ID]));
        visitor.visit(mBillboardNames,            static_cast<const BoolField *>    (fields()[BILLBOARDNAMES_ID]));
        visitor.visit(mPreferReprojected,         static_cast<const BoolField *>    (fields()[PREFER_REPROJECTED_ID]));
        visitor.visit(mForceKnown,                static_cast<const BoolField *>    (fields()[FORCE_KNOWN_ID]));
        visitor.visit(mPrivateColor,              static_cast<const BoolField *>    (fields()[PRIVATECOLOR_ID]));
        visitor.visit(mLargePoints,               static_cast<const BoolField *>    (fields()[LARGEPOINTS_ID]));
        visitor.visit(mDrawFixtureCams,           static_cast<const BoolField *>    (fields()[DRAWFIXTURECAMS_ID]));
        visitor.visit(mDrawObservations,          static_cast<const BoolField *>    (fields()[DRAWOBSERVATIONS_ID]));
        visitor.visit(mDrawRays,                  static_cast<const BoolField *>    (fields()[DRAWRAYS_ID]));
    }

    CalibrationDrawHelpersParameters()
    {
        DefaultSetter setter;
        accept(setter);
    }

    CalibrationDrawHelpersParameters(
          bool printNames
        , bool billboardNames
        , bool preferReprojected
        , bool forceKnown
        , bool privateColor
        , bool largePoints
        , bool drawFixtureCams
        , bool drawObservations
        , bool drawRays
    )
    {
        mPrintNames = printNames;
        mBillboardNames = billboardNames;
        mPreferReprojected = preferReprojected;
        mForceKnown = forceKnown;
        mPrivateColor = privateColor;
        mLargePoints = largePoints;
        mDrawFixtureCams = drawFixtureCams;
        mDrawObservations = drawObservations;
        mDrawRays = drawRays;
    }

    friend ostream& operator << (ostream &out, CalibrationDrawHelpersParameters &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //CALIBRATION_DRAW_HELPERS_PARAMETERS_H_
