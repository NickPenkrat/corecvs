#ifndef CHECKERBOARD_DETECTION_PARAMETERS_H_
#define CHECKERBOARD_DETECTION_PARAMETERS_H_
/**
 * \file checkerboardDetectionParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */
#include "imageChannel.h"

/**
 * \brief Checkerboard Detection Parameters 
 * Checkerboard Detection Parameters 
 **/
class CheckerboardDetectionParameters : public BaseReflection<CheckerboardDetectionParameters>
{
public:
    enum FieldId {
        CHANNEL_ID,
        V_CROSSES_COUNT_ID,
        H_CROSSES_COUNT_ID,
        CELL_SIZE_ID,
        CLEAN_EXISTING_ID,
        PRECISE_DIAMETER_ID,
        ITERATION_COUNT_ID,
        MIN_ACCURACY_ID,
        PARTIAL_BOARD_ID,
        FAST_BOARD_SPEEDUP_ID,
        CHECKERBOARD_DETECTION_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief Channel 
     * Channel 
     */
    int mChannel;

    /** 
     * \brief V crosses count 
     * V crosses count 
     */
    int mVCrossesCount;

    /** 
     * \brief H crosses count 
     * H crosses count 
     */
    int mHCrossesCount;

    /** 
     * \brief Cell size 
     * Cell size 
     */
    double mCellSize;

    /** 
     * \brief Clean existing 
     * Clean existing 
     */
    bool mCleanExisting;

    /** 
     * \brief Precise Diameter 
     * Precise Diameter 
     */
    int mPreciseDiameter;

    /** 
     * \brief Iteration count 
     * Iteration count 
     */
    int mIterationCount;

    /** 
     * \brief Min accuracy 
     * Min accuracy 
     */
    double mMinAccuracy;

    /** 
     * \brief Partial Board 
     * Partial Board 
     */
    bool mPartialBoard;

    /** 
     * \brief Fast board Speedup 
     * Fast board Speedup 
     */
    bool mFastBoardSpeedup;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    ImageChannel::ImageChannel channel() const
    {
        return static_cast<ImageChannel::ImageChannel>(mChannel);
    }

    int vCrossesCount() const
    {
        return mVCrossesCount;
    }

    int hCrossesCount() const
    {
        return mHCrossesCount;
    }

    double cellSize() const
    {
        return mCellSize;
    }

    bool cleanExisting() const
    {
        return mCleanExisting;
    }

    int preciseDiameter() const
    {
        return mPreciseDiameter;
    }

    int iterationCount() const
    {
        return mIterationCount;
    }

    double minAccuracy() const
    {
        return mMinAccuracy;
    }

    bool partialBoard() const
    {
        return mPartialBoard;
    }

    bool fastBoardSpeedup() const
    {
        return mFastBoardSpeedup;
    }

    /* Section with setters */
    void setChannel(ImageChannel::ImageChannel channel)
    {
        mChannel = channel;
    }

    void setVCrossesCount(int vCrossesCount)
    {
        mVCrossesCount = vCrossesCount;
    }

    void setHCrossesCount(int hCrossesCount)
    {
        mHCrossesCount = hCrossesCount;
    }

    void setCellSize(double cellSize)
    {
        mCellSize = cellSize;
    }

    void setCleanExisting(bool cleanExisting)
    {
        mCleanExisting = cleanExisting;
    }

    void setPreciseDiameter(int preciseDiameter)
    {
        mPreciseDiameter = preciseDiameter;
    }

    void setIterationCount(int iterationCount)
    {
        mIterationCount = iterationCount;
    }

    void setMinAccuracy(double minAccuracy)
    {
        mMinAccuracy = minAccuracy;
    }

    void setPartialBoard(bool partialBoard)
    {
        mPartialBoard = partialBoard;
    }

    void setFastBoardSpeedup(bool fastBoardSpeedup)
    {
        mFastBoardSpeedup = fastBoardSpeedup;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit((int &)mChannel,            static_cast<const EnumField *>    (fields()[CHANNEL_ID]));
        visitor.visit(mVCrossesCount,             static_cast<const IntField *>     (fields()[V_CROSSES_COUNT_ID]));
        visitor.visit(mHCrossesCount,             static_cast<const IntField *>     (fields()[H_CROSSES_COUNT_ID]));
        visitor.visit(mCellSize,                  static_cast<const DoubleField *>  (fields()[CELL_SIZE_ID]));
        visitor.visit(mCleanExisting,             static_cast<const BoolField *>    (fields()[CLEAN_EXISTING_ID]));
        visitor.visit(mPreciseDiameter,           static_cast<const IntField *>     (fields()[PRECISE_DIAMETER_ID]));
        visitor.visit(mIterationCount,            static_cast<const IntField *>     (fields()[ITERATION_COUNT_ID]));
        visitor.visit(mMinAccuracy,               static_cast<const DoubleField *>  (fields()[MIN_ACCURACY_ID]));
        visitor.visit(mPartialBoard,              static_cast<const BoolField *>    (fields()[PARTIAL_BOARD_ID]));
        visitor.visit(mFastBoardSpeedup,          static_cast<const BoolField *>    (fields()[FAST_BOARD_SPEEDUP_ID]));
    }

    CheckerboardDetectionParameters()
    {
        DefaultSetter setter;
        accept(setter);
    }

    CheckerboardDetectionParameters(
          ImageChannel::ImageChannel channel
        , int vCrossesCount
        , int hCrossesCount
        , double cellSize
        , bool cleanExisting
        , int preciseDiameter
        , int iterationCount
        , double minAccuracy
        , bool partialBoard
        , bool fastBoardSpeedup
    )
    {
        mChannel = channel;
        mVCrossesCount = vCrossesCount;
        mHCrossesCount = hCrossesCount;
        mCellSize = cellSize;
        mCleanExisting = cleanExisting;
        mPreciseDiameter = preciseDiameter;
        mIterationCount = iterationCount;
        mMinAccuracy = minAccuracy;
        mPartialBoard = partialBoard;
        mFastBoardSpeedup = fastBoardSpeedup;
    }

    friend ostream& operator << (ostream &out, CheckerboardDetectionParameters &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //CHECKERBOARD_DETECTION_PARAMETERS_H_
