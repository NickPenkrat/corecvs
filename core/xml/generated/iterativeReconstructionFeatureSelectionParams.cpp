/**
 * \file iterativeReconstructionFeatureSelectionParams.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "iterativeReconstructionFeatureSelectionParams.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<IterativeReconstructionFeatureSelectionParams>::reflection = Reflection();
template<>
int BaseReflection<IterativeReconstructionFeatureSelectionParams>::dummy = IterativeReconstructionFeatureSelectionParams::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN

int IterativeReconstructionFeatureSelectionParams::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Iterative Reconstruction Feature Selection Params",
        "Iterative Reconstruction Feature Selection Params",
        ""
    );
     

    DoubleField* field0 = new DoubleField
        (
          IterativeReconstructionFeatureSelectionParams::INLIERTHRESHOLD_ID,
          offsetof(IterativeReconstructionFeatureSelectionParams, mInlierThreshold),
          5,
          "inlierThreshold",
          "inlierThreshold",
          "Inlier threshold",
          true,
         0,
         50000
        );
    field0->widgetHint=BaseField::SPIN_BOX;
    field0->precision=6;
    fields().push_back(field0);
    /*  */ 
    DoubleField* field1 = new DoubleField
        (
          IterativeReconstructionFeatureSelectionParams::TRACKINLIERTHRESHOLD_ID,
          offsetof(IterativeReconstructionFeatureSelectionParams, mTrackInlierThreshold),
          3,
          "trackInlierThreshold",
          "trackInlierThreshold",
          "Track append threshold",
          true,
         0,
         50000
        );
    field1->widgetHint=BaseField::SPIN_BOX;
    field1->precision=6;
    fields().push_back(field1);
    /*  */ 
    DoubleField* field2 = new DoubleField
        (
          IterativeReconstructionFeatureSelectionParams::DISTANCELIMIT_ID,
          offsetof(IterativeReconstructionFeatureSelectionParams, mDistanceLimit),
          1000,
          "distanceLimit",
          "distanceLimit",
          "Track distance limit",
          true,
         0,
         500000
        );
    field2->widgetHint=BaseField::SPIN_BOX;
    field2->precision=2;
    fields().push_back(field2);
    /*  */ 
    CompositeField* field3 = new CompositeField
        (
          IterativeReconstructionFeatureSelectionParams::FEATUREDETECTIONPARAMS_ID,
          offsetof(IterativeReconstructionFeatureSelectionParams, mFeatureDetectionParams),
          "featureDetectionParams",
          "FeatureDetectionParams",
          "featureDetectionParams",
          "featureDetectionParams",
           NULL
        );
    field3->precision=-1;
    fields().push_back(field3);
    /*  */ 
    DoubleField* field4 = new DoubleField
        (
          IterativeReconstructionFeatureSelectionParams::RMSEPRUNINGSCALER_ID,
          offsetof(IterativeReconstructionFeatureSelectionParams, mRmsePruningScaler),
          3,
          "rmsePruningScaler",
          "rmsePruningScaler",
          "RMSE pruning scaler",
          true,
         0,
         10000
        );
    field4->widgetHint=BaseField::SPIN_BOX;
    field4->precision=6;
    fields().push_back(field4);
    /*  */ 
    DoubleField* field5 = new DoubleField
        (
          IterativeReconstructionFeatureSelectionParams::MAXPRUNINGSCALER_ID,
          offsetof(IterativeReconstructionFeatureSelectionParams, mMaxPruningScaler),
          5,
          "maxPruningScaler",
          "maxPruningScaler",
          "Max pruning scaler",
          true,
         0,
         10000
        );
    field5->widgetHint=BaseField::SPIN_BOX;
    field5->precision=6;
    fields().push_back(field5);
    /*  */ 
    BoolField* field6 = new BoolField
        (
          IterativeReconstructionFeatureSelectionParams::SKIPFEATUREDETECTION_ID,
          offsetof(IterativeReconstructionFeatureSelectionParams, mSkipFeatureDetection),
          false,
          "skipFeatureDetection",
          "skipFeatureDetection",
          "Skip feature detection"
        );
    field6->widgetHint=BaseField::CHECK_BOX;
    field6->precision=-1;
    fields().push_back(field6);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Iterative Reconstruction Feature Selection Params")]= &reflection;
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


