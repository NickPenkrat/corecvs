/**
 * \file featureDetectionParamsControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "featureDetectionParamsControlWidget.h"
#include "ui_featureDetectionParamsControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


FeatureDetectionParamsControlWidget::FeatureDetectionParamsControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::FeatureDetectionParamsControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->detectorEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->descriptorEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->matcherEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->b2bThresholdSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->matchF2FCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
}

FeatureDetectionParamsControlWidget::~FeatureDetectionParamsControlWidget()
{

    delete mUi;
}

void FeatureDetectionParamsControlWidget::loadParamWidget(WidgetLoader &loader)
{
    FeatureDetectionParams *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void FeatureDetectionParamsControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    FeatureDetectionParams *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}

 /* Composite fields are NOT supported so far */
void FeatureDetectionParamsControlWidget::getParameters(FeatureDetectionParams& params) const
{

    params.setDetector         (mUi->detectorEdit->text().toStdString());
    params.setDescriptor       (mUi->descriptorEdit->text().toStdString());
    params.setMatcher          (mUi->matcherEdit->text().toStdString());
    params.setB2bThreshold     (mUi->b2bThresholdSpinBox->value());
    params.setMatchF2F         (mUi->matchF2FCheckBox->isChecked());

}

FeatureDetectionParams *FeatureDetectionParamsControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    FeatureDetectionParams *result = new FeatureDetectionParams(
          mUi->detectorEdit->text().toStdString()
        , mUi->descriptorEdit->text().toStdString()
        , mUi->matcherEdit->text().toStdString()
        , mUi->b2bThresholdSpinBox->value()
        , mUi->matchF2FCheckBox->isChecked()
    );
    return result;
}

void FeatureDetectionParamsControlWidget::setParameters(const FeatureDetectionParams &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->detectorEdit->setText(input.detector().c_str());
    mUi->descriptorEdit->setText(input.descriptor().c_str());
    mUi->matcherEdit->setText(input.matcher().c_str());
    mUi->b2bThresholdSpinBox->setValue(input.b2bThreshold());
    mUi->matchF2FCheckBox->setChecked(input.matchF2F());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void FeatureDetectionParamsControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    FeatureDetectionParams *inputCasted = static_cast<FeatureDetectionParams *>(input);
    setParameters(*inputCasted);
}
