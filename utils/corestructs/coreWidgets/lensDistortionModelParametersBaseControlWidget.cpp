/**
 * \file lensDistortionModelParametersBaseControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "lensDistortionModelParametersBaseControlWidget.h"
#include "ui_lensDistortionModelParametersBaseControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


LensDistortionModelParametersBaseControlWidget::LensDistortionModelParametersBaseControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::LensDistortionModelParametersBaseControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->principalXSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->principalYSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->tangentialXSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->tangentialYSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->koeff, SIGNAL(valueChanged()), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->aspectSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->scaleSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->normalizingFocalSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->shiftXSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->shiftYSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->mapForwardCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
}

LensDistortionModelParametersBaseControlWidget::~LensDistortionModelParametersBaseControlWidget()
{

    delete mUi;
}

void LensDistortionModelParametersBaseControlWidget::loadParamWidget(WidgetLoader &loader)
{
    LensDistortionModelParametersBase *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void LensDistortionModelParametersBaseControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    LensDistortionModelParametersBase *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}

 /* Composite fields are NOT supported so far */
void LensDistortionModelParametersBaseControlWidget::getParameters(LensDistortionModelParametersBase& params) const
{

    params.setPrincipalX       (mUi->principalXSpinBox->value());
    params.setPrincipalY       (mUi->principalYSpinBox->value());
    params.setTangentialX      (mUi->tangentialXSpinBox->value());
    params.setTangentialY      (mUi->tangentialYSpinBox->value());
    params.setKoeff            (mUi->koeff->value());
    params.setAspect           (mUi->aspectSpinBox->value());
    params.setScale            (mUi->scaleSpinBox->value());
    params.setNormalizingFocal (mUi->normalizingFocalSpinBox->value());
    params.setShiftX           (mUi->shiftXSpinBox->value());
    params.setShiftY           (mUi->shiftYSpinBox->value());
    params.setMapForward       (mUi->mapForwardCheckBox->isChecked());

}

LensDistortionModelParametersBase *LensDistortionModelParametersBaseControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    LensDistortionModelParametersBase *result = new LensDistortionModelParametersBase(
          mUi->principalXSpinBox->value()
        , mUi->principalYSpinBox->value()
        , mUi->tangentialXSpinBox->value()
        , mUi->tangentialYSpinBox->value()
        , mUi->koeff->value()
        , mUi->aspectSpinBox->value()
        , mUi->scaleSpinBox->value()
        , mUi->normalizingFocalSpinBox->value()
        , mUi->shiftXSpinBox->value()
        , mUi->shiftYSpinBox->value()
        , mUi->mapForwardCheckBox->isChecked()
    );
    return result;
}

void LensDistortionModelParametersBaseControlWidget::setParameters(const LensDistortionModelParametersBase &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->principalXSpinBox->setValue(input.principalX());
    mUi->principalYSpinBox->setValue(input.principalY());
    mUi->tangentialXSpinBox->setValue(input.tangentialX());
    mUi->tangentialYSpinBox->setValue(input.tangentialY());
    mUi->koeff->setValue(input.koeff());
    mUi->aspectSpinBox->setValue(input.aspect());
    mUi->scaleSpinBox->setValue(input.scale());
    mUi->normalizingFocalSpinBox->setValue(input.normalizingFocal());
    mUi->shiftXSpinBox->setValue(input.shiftX());
    mUi->shiftYSpinBox->setValue(input.shiftY());
    mUi->mapForwardCheckBox->setChecked(input.mapForward());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void LensDistortionModelParametersBaseControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    LensDistortionModelParametersBase *inputCasted = static_cast<LensDistortionModelParametersBase *>(input);
    setParameters(*inputCasted);
}
