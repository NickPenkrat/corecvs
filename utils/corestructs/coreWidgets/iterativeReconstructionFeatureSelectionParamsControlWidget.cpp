/**
 * \file iterativeReconstructionFeatureSelectionParamsControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "iterativeReconstructionFeatureSelectionParamsControlWidget.h"
#include "ui_iterativeReconstructionFeatureSelectionParamsControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"

#include "featureDetectionParamsControlWidget.h"

IterativeReconstructionFeatureSelectionParamsControlWidget::IterativeReconstructionFeatureSelectionParamsControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::IterativeReconstructionFeatureSelectionParamsControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->inlierThresholdSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->trackInlierThresholdSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->distanceLimitSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->featureDetectionParamsControlWidget, SIGNAL(paramsChanged()), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->rmsePruningScalerSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->maxPruningScalerSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->skipFeatureDetectionCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
}

IterativeReconstructionFeatureSelectionParamsControlWidget::~IterativeReconstructionFeatureSelectionParamsControlWidget()
{

    delete mUi;
}

void IterativeReconstructionFeatureSelectionParamsControlWidget::loadParamWidget(WidgetLoader &loader)
{
    IterativeReconstructionFeatureSelectionParams *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void IterativeReconstructionFeatureSelectionParamsControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    IterativeReconstructionFeatureSelectionParams *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}

 /* Composite fields are NOT supported so far */
void IterativeReconstructionFeatureSelectionParamsControlWidget::getParameters(IterativeReconstructionFeatureSelectionParams& params) const
{

    params.setInlierThreshold  (mUi->inlierThresholdSpinBox->value());
    params.setTrackInlierThreshold(mUi->trackInlierThresholdSpinBox->value());
    params.setDistanceLimit    (mUi->distanceLimitSpinBox->value());
//    params.setFeatureDetectionParams(mUi->featureDetectionParamsControlWidget->createParameters());
    params.setRmsePruningScaler(mUi->rmsePruningScalerSpinBox->value());
    params.setMaxPruningScaler (mUi->maxPruningScalerSpinBox->value());
    params.setSkipFeatureDetection(mUi->skipFeatureDetectionCheckBox->isChecked());

}

IterativeReconstructionFeatureSelectionParams *IterativeReconstructionFeatureSelectionParamsControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/

    FeatureDetectionParams *tmp3 = NULL;

    IterativeReconstructionFeatureSelectionParams *result = new IterativeReconstructionFeatureSelectionParams(
          mUi->inlierThresholdSpinBox->value()
        , mUi->trackInlierThresholdSpinBox->value()
        , mUi->distanceLimitSpinBox->value()
        , * (tmp3 = mUi->featureDetectionParamsControlWidget->createParameters())
        , mUi->rmsePruningScalerSpinBox->value()
        , mUi->maxPruningScalerSpinBox->value()
        , mUi->skipFeatureDetectionCheckBox->isChecked()
    );
    delete tmp3;
    return result;
}

void IterativeReconstructionFeatureSelectionParamsControlWidget::setParameters(const IterativeReconstructionFeatureSelectionParams &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->inlierThresholdSpinBox->setValue(input.inlierThreshold());
    mUi->trackInlierThresholdSpinBox->setValue(input.trackInlierThreshold());
    mUi->distanceLimitSpinBox->setValue(input.distanceLimit());
    mUi->featureDetectionParamsControlWidget->setParameters(input.featureDetectionParams());
    mUi->rmsePruningScalerSpinBox->setValue(input.rmsePruningScaler());
    mUi->maxPruningScalerSpinBox->setValue(input.maxPruningScaler());
    mUi->skipFeatureDetectionCheckBox->setChecked(input.skipFeatureDetection());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void IterativeReconstructionFeatureSelectionParamsControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    IterativeReconstructionFeatureSelectionParams *inputCasted = static_cast<IterativeReconstructionFeatureSelectionParams *>(input);
    setParameters(*inputCasted);
}
