/**
 * \file checkerboardDetectionParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "checkerboardDetectionParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<CheckerboardDetectionParameters>::reflection = Reflection();
template<>
int BaseReflection<CheckerboardDetectionParameters>::dummy = CheckerboardDetectionParameters::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN

int CheckerboardDetectionParameters::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Checkerboard Detection Parameters",
        "Checkerboard Detection Parameters",
        ""
    );
     

    fields().push_back(
        new EnumField
        (
          CheckerboardDetectionParameters::CHANNEL_ID,
          offsetof(CheckerboardDetectionParameters, mChannel),
          0,
          "Channel",
          "Channel",
          "Channel",
          new EnumReflection(7
          , new EnumOption(0,"R")
          , new EnumOption(1,"G")
          , new EnumOption(2,"B")
          , new EnumOption(3,"Gray")
          , new EnumOption(4,"Hue")
          , new EnumOption(5,"Saturation")
          , new EnumOption(6,"Value")
          )
        )
    );
    fields().push_back(
        new IntField
        (
          CheckerboardDetectionParameters::V_CROSSES_COUNT_ID,
          offsetof(CheckerboardDetectionParameters, mVCrossesCount),
          11,
          "V crosses count",
          "V crosses count",
          "V crosses count"
        )
    );
    fields().push_back(
        new IntField
        (
          CheckerboardDetectionParameters::H_CROSSES_COUNT_ID,
          offsetof(CheckerboardDetectionParameters, mHCrossesCount),
          18,
          "H crosses count",
          "H crosses count",
          "H crosses count"
        )
    );
    fields().push_back(
        new DoubleField
        (
          CheckerboardDetectionParameters::CELL_SIZE_ID,
          offsetof(CheckerboardDetectionParameters, mCellSize),
          50,
          "Cell size",
          "Cell size",
          "Cell size"
        )
    );
    fields().push_back(
        new BoolField
        (
          CheckerboardDetectionParameters::CLEAN_EXISTING_ID,
          offsetof(CheckerboardDetectionParameters, mCleanExisting),
          true,
          "Clean existing",
          "Clean existing",
          "Clean existing"
        )
    );
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


