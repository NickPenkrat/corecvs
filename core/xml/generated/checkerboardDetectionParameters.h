#ifndef CHECKERBOARD_DETECTION_PARAMETERS_H_
#define CHECKERBOARD_DETECTION_PARAMETERS_H_
/**
 * \file checkerboardDetectionParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Checkerboard Detection Parameters 
 * Checkerboard Detection Parameters 
 **/
class CheckerboardDetectionParameters : public BaseReflection<CheckerboardDetectionParameters>
{
public:
    enum FieldId {
        V_CROSSES_COUNT_ID,
        H_CROSSES_COUNT_ID,
        CELL_SIZE_ID,
        CLEAN_EXISTING_ID,
        CHECKERBOARD_DETECTION_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief V crosses count 
     * V crosses count 
     */
    int mVCrossesCount;

    /** 
     * \brief H crosses count 
     * H crosses count 
     */
    int mHCrossesCount;

    /** 
     * \brief Cell size 
     * Cell size 
     */
    double mCellSize;

    /** 
     * \brief Clean existing 
     * Clean existing 
     */
    bool mCleanExisting;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    int vCrossesCount() const
    {
        return mVCrossesCount;
    }

    int hCrossesCount() const
    {
        return mHCrossesCount;
    }

    double cellSize() const
    {
        return mCellSize;
    }

    bool cleanExisting() const
    {
        return mCleanExisting;
    }

    /* Section with setters */
    void setVCrossesCount(int vCrossesCount)
    {
        mVCrossesCount = vCrossesCount;
    }

    void setHCrossesCount(int hCrossesCount)
    {
        mHCrossesCount = hCrossesCount;
    }

    void setCellSize(double cellSize)
    {
        mCellSize = cellSize;
    }

    void setCleanExisting(bool cleanExisting)
    {
        mCleanExisting = cleanExisting;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mVCrossesCount,             static_cast<const IntField *>     (fields()[V_CROSSES_COUNT_ID]));
        visitor.visit(mHCrossesCount,             static_cast<const IntField *>     (fields()[H_CROSSES_COUNT_ID]));
        visitor.visit(mCellSize,                  static_cast<const DoubleField *>  (fields()[CELL_SIZE_ID]));
        visitor.visit(mCleanExisting,             static_cast<const BoolField *>    (fields()[CLEAN_EXISTING_ID]));
    }

    CheckerboardDetectionParameters()
    {
        DefaultSetter setter;
        accept(setter);
    }

    CheckerboardDetectionParameters(
          int vCrossesCount
        , int hCrossesCount
        , double cellSize
        , bool cleanExisting
    )
    {
        mVCrossesCount = vCrossesCount;
        mHCrossesCount = hCrossesCount;
        mCellSize = cellSize;
        mCleanExisting = cleanExisting;
    }

    friend ostream& operator << (ostream &out, CheckerboardDetectionParameters &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //CHECKERBOARD_DETECTION_PARAMETERS_H_
