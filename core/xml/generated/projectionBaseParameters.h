#ifndef PROJECTION_BASE_PARAMETERS_H_
#define PROJECTION_BASE_PARAMETERS_H_
/**
 * \file projectionBaseParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from projections.xml
 */

#include "core/reflection/reflection.h"
#include "core/reflection/defaultSetter.h"
#include "core/reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Projection Base Parameters 
 * Projection Base Parameters 
 **/
class ProjectionBaseParameters : public corecvs::BaseReflection<ProjectionBaseParameters>
{
public:
    enum FieldId {
        PRINCIPALX_ID,
        PRINCIPALY_ID,
        FOCAL_ID,
        PROJECTION_BASE_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief principalX 
     * The center of projection \f$x_c\f$ 
     */
    double mPrincipalX;

    /** 
     * \brief principalY 
     * The center of projection \f$y_c\f$ 
     */
    double mPrincipalY;

    /** 
     * \brief focal 
     * focal 
     */
    double mFocal;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    double principalX() const
    {
        return mPrincipalX;
    }

    double principalY() const
    {
        return mPrincipalY;
    }

    double focal() const
    {
        return mFocal;
    }

    /* Section with setters */
    void setPrincipalX(double principalX)
    {
        mPrincipalX = principalX;
    }

    void setPrincipalY(double principalY)
    {
        mPrincipalY = principalY;
    }

    void setFocal(double focal)
    {
        mFocal = focal;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mPrincipalX,                static_cast<const corecvs::DoubleField *>(fields()[PRINCIPALX_ID]));
        visitor.visit(mPrincipalY,                static_cast<const corecvs::DoubleField *>(fields()[PRINCIPALY_ID]));
        visitor.visit(mFocal,                     static_cast<const corecvs::DoubleField *>(fields()[FOCAL_ID]));
    }

    ProjectionBaseParameters()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    ProjectionBaseParameters(
          double principalX
        , double principalY
        , double focal
    )
    {
        mPrincipalX = principalX;
        mPrincipalY = principalY;
        mFocal = focal;
    }

    bool operator ==(const ProjectionBaseParameters &other) const 
    {
        if ( !(this->mPrincipalX == other.mPrincipalX)) return false;
        if ( !(this->mPrincipalY == other.mPrincipalY)) return false;
        if ( !(this->mFocal == other.mFocal)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, ProjectionBaseParameters &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //PROJECTION_BASE_PARAMETERS_H_
