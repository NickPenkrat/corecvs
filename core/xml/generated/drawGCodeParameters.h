#ifndef DRAW_GCODE_PARAMETERS_H_
#define DRAW_GCODE_PARAMETERS_H_
/**
 * \file drawGCodeParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */
#include "gCodeColoringSheme.h"

/**
 * \brief draw GCode Parameters 
 * draw GCode Parameters 
 **/
class DrawGCodeParameters : public corecvs::BaseReflection<DrawGCodeParameters>
{
public:
    enum FieldId {
        SCHEME_ID,
        MINTEMP_ID,
        MAXTEMP_ID,
        MINSPEED_ID,
        MAXSPEED_ID,
        DRAW_GCODE_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief scheme 
     * scheme 
     */
    int mScheme;

    /** 
     * \brief minTemp 
     * minTemp 
     */
    double mMinTemp;

    /** 
     * \brief maxTemp 
     * maxTemp 
     */
    double mMaxTemp;

    /** 
     * \brief minSpeed 
     * minSpeed 
     */
    double mMinSpeed;

    /** 
     * \brief maxSpeed 
     * maxSpeed 
     */
    double mMaxSpeed;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    GCodeColoringSheme::GCodeColoringSheme scheme() const
    {
        return static_cast<GCodeColoringSheme::GCodeColoringSheme>(mScheme);
    }

    double minTemp() const
    {
        return mMinTemp;
    }

    double maxTemp() const
    {
        return mMaxTemp;
    }

    double minSpeed() const
    {
        return mMinSpeed;
    }

    double maxSpeed() const
    {
        return mMaxSpeed;
    }

    /* Section with setters */
    void setScheme(GCodeColoringSheme::GCodeColoringSheme scheme)
    {
        mScheme = scheme;
    }

    void setMinTemp(double minTemp)
    {
        mMinTemp = minTemp;
    }

    void setMaxTemp(double maxTemp)
    {
        mMaxTemp = maxTemp;
    }

    void setMinSpeed(double minSpeed)
    {
        mMinSpeed = minSpeed;
    }

    void setMaxSpeed(double maxSpeed)
    {
        mMaxSpeed = maxSpeed;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit((int &)mScheme,             static_cast<const corecvs::EnumField *>(fields()[SCHEME_ID]));
        visitor.visit(mMinTemp,                   static_cast<const corecvs::DoubleField *>(fields()[MINTEMP_ID]));
        visitor.visit(mMaxTemp,                   static_cast<const corecvs::DoubleField *>(fields()[MAXTEMP_ID]));
        visitor.visit(mMinSpeed,                  static_cast<const corecvs::DoubleField *>(fields()[MINSPEED_ID]));
        visitor.visit(mMaxSpeed,                  static_cast<const corecvs::DoubleField *>(fields()[MAXSPEED_ID]));
    }

    DrawGCodeParameters()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    DrawGCodeParameters(
          GCodeColoringSheme::GCodeColoringSheme scheme
        , double minTemp
        , double maxTemp
        , double minSpeed
        , double maxSpeed
    )
    {
        mScheme = scheme;
        mMinTemp = minTemp;
        mMaxTemp = maxTemp;
        mMinSpeed = minSpeed;
        mMaxSpeed = maxSpeed;
    }

    friend std::ostream& operator << (std::ostream &out, DrawGCodeParameters &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //DRAW_GCODE_PARAMETERS_H_
