/**
 * \file photostationPlacerParamsBaseControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "photostationPlacerParamsBaseControlWidget.h"
#include "ui_photostationPlacerParamsBaseControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


PhotostationPlacerParamsBaseControlWidget::PhotostationPlacerParamsBaseControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::PhotostationPlacerParamsBaseControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->forceGpsCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->speculativitySpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->minimalInlierCountSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->maximalFailureProbabilitySpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
}

PhotostationPlacerParamsBaseControlWidget::~PhotostationPlacerParamsBaseControlWidget()
{

    delete mUi;
}

void PhotostationPlacerParamsBaseControlWidget::loadParamWidget(WidgetLoader &loader)
{
    PhotostationPlacerParamsBase *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void PhotostationPlacerParamsBaseControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    PhotostationPlacerParamsBase *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}

 /* Composite fields are NOT supported so far */
void PhotostationPlacerParamsBaseControlWidget::getParameters(PhotostationPlacerParamsBase& params) const
{

    params.setForceGps         (mUi->forceGpsCheckBox->isChecked());
    params.setSpeculativity    (mUi->speculativitySpinBox->value());
    params.setMinimalInlierCount(mUi->minimalInlierCountSpinBox->value());
    params.setMaximalFailureProbability(mUi->maximalFailureProbabilitySpinBox->value());

}

PhotostationPlacerParamsBase *PhotostationPlacerParamsBaseControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    PhotostationPlacerParamsBase *result = new PhotostationPlacerParamsBase(
          mUi->forceGpsCheckBox->isChecked()
        , mUi->speculativitySpinBox->value()
        , mUi->minimalInlierCountSpinBox->value()
        , mUi->maximalFailureProbabilitySpinBox->value()
    );
    return result;
}

void PhotostationPlacerParamsBaseControlWidget::setParameters(const PhotostationPlacerParamsBase &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->forceGpsCheckBox->setChecked(input.forceGps());
    mUi->speculativitySpinBox->setValue(input.speculativity());
    mUi->minimalInlierCountSpinBox->setValue(input.minimalInlierCount());
    mUi->maximalFailureProbabilitySpinBox->setValue(input.maximalFailureProbability());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void PhotostationPlacerParamsBaseControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    PhotostationPlacerParamsBase *inputCasted = static_cast<PhotostationPlacerParamsBase *>(input);
    setParameters(*inputCasted);
}
