/**
 * \file chessBoardCornerDetectorParamsBaseControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "chessBoardCornerDetectorParamsBaseControlWidget.h"
#include "ui_chessBoardCornerDetectorParamsBaseControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


ChessBoardCornerDetectorParamsBaseControlWidget::ChessBoardCornerDetectorParamsBaseControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::ChessBoardCornerDetectorParamsBaseControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->produceDebugCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->floatSpeedupCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
}

ChessBoardCornerDetectorParamsBaseControlWidget::~ChessBoardCornerDetectorParamsBaseControlWidget()
{

    delete mUi;
}

void ChessBoardCornerDetectorParamsBaseControlWidget::loadParamWidget(WidgetLoader &loader)
{
    ChessBoardCornerDetectorParamsBase *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void ChessBoardCornerDetectorParamsBaseControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    ChessBoardCornerDetectorParamsBase *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}

 /* Composite fields are NOT supported so far */
void ChessBoardCornerDetectorParamsBaseControlWidget::getParameters(ChessBoardCornerDetectorParamsBase& params) const
{

    params.setProduceDebug     (mUi->produceDebugCheckBox->isChecked());
    params.setFloatSpeedup     (mUi->floatSpeedupCheckBox->isChecked());

}

ChessBoardCornerDetectorParamsBase *ChessBoardCornerDetectorParamsBaseControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    ChessBoardCornerDetectorParamsBase *result = new ChessBoardCornerDetectorParamsBase(
          mUi->produceDebugCheckBox->isChecked()
        , mUi->floatSpeedupCheckBox->isChecked()
    );
    return result;
}

void ChessBoardCornerDetectorParamsBaseControlWidget::setParameters(const ChessBoardCornerDetectorParamsBase &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->produceDebugCheckBox->setChecked(input.produceDebug());
    mUi->floatSpeedupCheckBox->setChecked(input.floatSpeedup());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void ChessBoardCornerDetectorParamsBaseControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    ChessBoardCornerDetectorParamsBase *inputCasted = static_cast<ChessBoardCornerDetectorParamsBase *>(input);
    setParameters(*inputCasted);
}
