/**
 * \file extrinsicsPlacerParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "extrinsicsPlacerParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<ExtrinsicsPlacerParameters>::reflection = Reflection();
template<>
int BaseReflection<ExtrinsicsPlacerParameters>::dummy = ExtrinsicsPlacerParameters::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int ExtrinsicsPlacerParameters::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Extrinsics Placer Parameters",
        "Extrinsics Placer Parameters",
        ""
    );

     getReflection()->objectSize = sizeof(ExtrinsicsPlacerParameters);
     

    BoolField* field0 = new BoolField
        (
          ExtrinsicsPlacerParameters::TRIANGULATE_ON_SPHERE_ID,
          offsetof(ExtrinsicsPlacerParameters, mTriangulateOnSphere),
          false,
          "triangulate on sphere",
          "triangulate on sphere",
          "triangulate on sphere"
        );
    field0->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field0);
    /*  */ 
    DoubleField* field1 = new DoubleField
        (
          ExtrinsicsPlacerParameters::SKYDOME_SIZE_ID,
          offsetof(ExtrinsicsPlacerParameters, mSkydomeSize),
          30,
          "Skydome size",
          "Skydome size",
          "Skydome size",
          true,
         0.01,
         1000,
         1
        );
    field1->widgetHint=BaseField::SPIN_BOX;
    field1->precision=2;
    fields().push_back(field1);
    /*  */ 
    IntField* field2 = new IntField
        (
          ExtrinsicsPlacerParameters::ITERATIONS_ID,
          offsetof(ExtrinsicsPlacerParameters, mIterations),
          100,
          "Iterations",
          "Iterations",
          "Iterations",
          true,
         2,
         10000,
         1
        );
    fields().push_back(field2);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Extrinsics Placer Parameters")]= &reflection;
   return 0;
}
int ExtrinsicsPlacerParameters::relinkCompositeFields()
{
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


